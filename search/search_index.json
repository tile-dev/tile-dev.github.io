{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"community/","text":"GitHub Our centre of gravity is our GitHub where we build in the open. Come and get involved! Forums We host the Data Developer forum for all things to do with building data apps and frontends. Come and say hi! Twitter For updates, make sure to follow the Tile project on Twitter.","title":"Community"},{"location":"community/#github","text":"Our centre of gravity is our GitHub where we build in the open. Come and get involved!","title":"GitHub"},{"location":"community/#forums","text":"We host the Data Developer forum for all things to do with building data apps and frontends. Come and say hi!","title":"Forums"},{"location":"community/#twitter","text":"For updates, make sure to follow the Tile project on Twitter.","title":"Twitter"},{"location":"learn/architecture/","text":"Architecture & Philosophy Tile's architecture takes inspiration from web frameworks and static site generators. Decoupled Tile is multi-tier architecture where the view layer and execution layer are decoupled. This has obvious performance benefits (as reports can scale to an unlimited number of users). It also means that asset and report generation can happen inside of other platforms you already use - like Spark and Jupyter. Static generation Reports in Tile are statically generated. They can be exported as HTML files which can shared without a running server, or uploaded to a compatible web host, such as Datapane. Serverless Tile's execution model allows you to build automated reports (that update on a schedule), or you can add superpowers to your reports by turning them into apps which can be run with parameters.","title":"Architecture & Philosophy"},{"location":"learn/architecture/#architecture-philosophy","text":"Tile's architecture takes inspiration from web frameworks and static site generators.","title":"Architecture &amp; Philosophy"},{"location":"learn/architecture/#decoupled","text":"Tile is multi-tier architecture where the view layer and execution layer are decoupled. This has obvious performance benefits (as reports can scale to an unlimited number of users). It also means that asset and report generation can happen inside of other platforms you already use - like Spark and Jupyter.","title":"Decoupled"},{"location":"learn/architecture/#static-generation","text":"Reports in Tile are statically generated. They can be exported as HTML files which can shared without a running server, or uploaded to a compatible web host, such as Datapane.","title":"Static generation"},{"location":"learn/architecture/#serverless","text":"Tile's execution model allows you to build automated reports (that update on a schedule), or you can add superpowers to your reports by turning them into apps which can be run with parameters.","title":"Serverless"},{"location":"learn/comparisons/","text":"Hosted Jupyter Notebooks When data science teams want an end-to-end hosted environment for SQL and Python which enables collaboration and sharing, they may use a hosted Jupyter notebook. Tile is not a replacement for the analysis or R&D stage of your data science process and seeks to be a complement to these platforms. Instead, it is only focussed on the 'last mile'. This means that you can also use Tile inside any existing Python environment, such as Colab, Deepnote, Hex, or SageMaker. Realtime App Frameworks Frameworks such as Streamlit, Dash, and Gradio allow users to create realtime applications which you then deploy to the cloud. Advantages Highly interactive : reactive execution model better for highly-interactive use-cases (i.e. a live computer vision model) Disadvantages Not decoupled : You can only build realtime apps, not discrete reports (i.e. snapshots). This means that all sharing requires you [TODO: better explanation why this matters] Hard to migrate workloads: Incompatible with Jupyter Notebooks and existing code, whereas Datapane can take existing notebooks and scripts with minimal configuration Complex deployment and engineering: requires architecting and handling of complex apps principles No programmatic reporting: Doesn\u2019t solve the JTBD around programmatic reporting or reporting embedded in workflows","title":"Comparisons"},{"location":"learn/comparisons/#hosted-jupyter-notebooks","text":"When data science teams want an end-to-end hosted environment for SQL and Python which enables collaboration and sharing, they may use a hosted Jupyter notebook. Tile is not a replacement for the analysis or R&D stage of your data science process and seeks to be a complement to these platforms. Instead, it is only focussed on the 'last mile'. This means that you can also use Tile inside any existing Python environment, such as Colab, Deepnote, Hex, or SageMaker.","title":"Hosted Jupyter Notebooks"},{"location":"learn/comparisons/#realtime-app-frameworks","text":"Frameworks such as Streamlit, Dash, and Gradio allow users to create realtime applications which you then deploy to the cloud.","title":"Realtime App Frameworks"},{"location":"learn/comparisons/#advantages","text":"Highly interactive : reactive execution model better for highly-interactive use-cases (i.e. a live computer vision model)","title":"Advantages"},{"location":"learn/comparisons/#disadvantages","text":"Not decoupled : You can only build realtime apps, not discrete reports (i.e. snapshots). This means that all sharing requires you [TODO: better explanation why this matters] Hard to migrate workloads: Incompatible with Jupyter Notebooks and existing code, whereas Datapane can take existing notebooks and scripts with minimal configuration Complex deployment and engineering: requires architecting and handling of complex apps principles No programmatic reporting: Doesn\u2019t solve the JTBD around programmatic reporting or reporting embedded in workflows","title":"Disadvantages"},{"location":"learn/faq/","text":"Is Tile production ready? Who builds Tile? Is Tile free?","title":"FAQ"},{"location":"learn/faq/#is-tile-production-ready","text":"","title":"Is Tile production ready?"},{"location":"learn/faq/#who-builds-tile","text":"","title":"Who builds Tile?"},{"location":"learn/faq/#is-tile-free","text":"","title":"Is Tile free?"},{"location":"learn/usecases/","text":"Instrumenting data pipelines When a discrepancy occurs in our data pipeline and you need to understand what has gone wrong, you can use Tile to create, persist, and share a report with your team. Client sharing When you want to impress potential or existing customers with interactive data products in order to increase revenue/retention, you can use Tile to create interactive reports which you can share with them. Programmatic reporting When you need to save time by automating report creation, you can use Tile to programmatically generate reports (instead of building them manually). Self-service apps When we want non-technical people to be able to run advanced analytics for themselves, we can build them an app using Tile. Ad-hoc internal reporting When you have completed an ad-hoc analysis and want to share your findings with someone non-technical, you can create them a report using Tile.","title":"Use-cases"},{"location":"learn/usecases/#instrumenting-data-pipelines","text":"When a discrepancy occurs in our data pipeline and you need to understand what has gone wrong, you can use Tile to create, persist, and share a report with your team.","title":"Instrumenting data pipelines"},{"location":"learn/usecases/#client-sharing","text":"When you want to impress potential or existing customers with interactive data products in order to increase revenue/retention, you can use Tile to create interactive reports which you can share with them.","title":"Client sharing"},{"location":"learn/usecases/#programmatic-reporting","text":"When you need to save time by automating report creation, you can use Tile to programmatically generate reports (instead of building them manually).","title":"Programmatic reporting"},{"location":"learn/usecases/#self-service-apps","text":"When we want non-technical people to be able to run advanced analytics for themselves, we can build them an app using Tile.","title":"Self-service apps"},{"location":"learn/usecases/#ad-hoc-internal-reporting","text":"When you have completed an ad-hoc analysis and want to share your findings with someone non-technical, you can create them a report using Tile.","title":"Ad-hoc internal reporting"},{"location":"learn/what/","text":"Tile is an SDK and architecture for creating data-driven applications. You can use it to create static documents (such as reports), automated dashboards, or parameterized apps which run in the cloud. Tile aims to be the fastest and easiest way for data teams to share insights in a code-first way, with features such as: Static generation of standalone HTML reports Serverless app-running with parameters Plot and data components compatible with the majority of the Python data ecosystem (such as Pandas, Altair, Plotly) Built in client-side report components, such as dropdowns, selects, and interactive datatables Fully integratable into existing Python environments, like Jupyter and Spark What isn't Tile? Tile is not a realtime reactive web framework like Streamlit or Dash Tile is not an analysis environment like Jupyter What can I build with Tile? Static reports Tile allows you to generate static HTML reports from your existing environment, such as Jupyter, Airflow, or Spark. They are fully standalone and do not require a running Python server for viewing. Instead, you can export them as HTML reports or upload them to web-based hosts. Views can contain components which wrap up the Python objects inside your analysis. Out of the box, you can add formats such as: Pandas DataFrames Plots from Python visualization libraries such as Bokeh, Altair, Plotly, and Folium Markdown and text General files, such as images, PDFs, JSON data, etc Tile also provides a rich selection of layout and interactive components, such as grids, dropdowns, selects, and a fully interactive DataTable. Views can replace creating a report in a BI tool, such as Looker or Tableau. Example import pandas as pd import tile - dev as t df = ... t . View ( t . DataTable ( df )) . save_report ( path = 'report.html' ) Data apps Introduction Static reports are great to start with, but you might need your end-users to be able to run your Python script or Jupyter Notebook themselves. Tile allows you to turn any Python script or Notebook into an API which can be called from inside your views. Need your report to Tile Tile's Runner makes it simple to deploy a script or Jupyter Notebook so that end-users can run it with parameters. You can combine it with Views to create interactive data apps. Runner is an open standard for defining how your data science code should run and what parameters it takes. It's execution is serverless, which means for each request, it spins up a docker container, executes the workload, and shuts down. Example script : calculator.ipynb name : startup_calculator repo : https://github.com/datapane/gallery/tree/master/startup-calculator title : Startup Burn Calculator parameters : - name : current_cash description : The amount of cash you have in the bank type : integer required : True default : 100000 min : 0 - name : forecast_length_years description : The number of years to forecast type : integer required : True min : 1 max : 10 default : 2 $ tile runner exec [ - ] Building startup_calculator...","title":"What is Tile?"},{"location":"learn/what/#what-isnt-tile","text":"Tile is not a realtime reactive web framework like Streamlit or Dash Tile is not an analysis environment like Jupyter","title":"What isn't Tile?"},{"location":"learn/what/#what-can-i-build-with-tile","text":"","title":"What can I build with Tile?"},{"location":"learn/what/#static-reports","text":"Tile allows you to generate static HTML reports from your existing environment, such as Jupyter, Airflow, or Spark. They are fully standalone and do not require a running Python server for viewing. Instead, you can export them as HTML reports or upload them to web-based hosts. Views can contain components which wrap up the Python objects inside your analysis. Out of the box, you can add formats such as: Pandas DataFrames Plots from Python visualization libraries such as Bokeh, Altair, Plotly, and Folium Markdown and text General files, such as images, PDFs, JSON data, etc Tile also provides a rich selection of layout and interactive components, such as grids, dropdowns, selects, and a fully interactive DataTable. Views can replace creating a report in a BI tool, such as Looker or Tableau.","title":"Static reports"},{"location":"learn/what/#example","text":"import pandas as pd import tile - dev as t df = ... t . View ( t . DataTable ( df )) . save_report ( path = 'report.html' )","title":"Example"},{"location":"learn/what/#data-apps","text":"","title":"Data apps"},{"location":"learn/what/#introduction","text":"Static reports are great to start with, but you might need your end-users to be able to run your Python script or Jupyter Notebook themselves. Tile allows you to turn any Python script or Notebook into an API which can be called from inside your views. Need your report to Tile Tile's Runner makes it simple to deploy a script or Jupyter Notebook so that end-users can run it with parameters. You can combine it with Views to create interactive data apps. Runner is an open standard for defining how your data science code should run and what parameters it takes. It's execution is serverless, which means for each request, it spins up a docker container, executes the workload, and shuts down.","title":"Introduction"},{"location":"learn/what/#example_1","text":"script : calculator.ipynb name : startup_calculator repo : https://github.com/datapane/gallery/tree/master/startup-calculator title : Startup Burn Calculator parameters : - name : current_cash description : The amount of cash you have in the bank type : integer required : True default : 100000 min : 0 - name : forecast_length_years description : The number of years to forecast type : integer required : True min : 1 max : 10 default : 2 $ tile runner exec [ - ] Building startup_calculator...","title":"Example"},{"location":"learn/why/","text":"Why does Tile exist? We believe the future of data analysis is open-source and code-first. Data teams are increasing choosing developer-first tools over UI-based platforms. But there is one part of the stack that has very little developer-first tooling: the front-end. We believe the front-end is fundamentally broken because it's currently bundled into big, expensive BI tools. Even though many data scientists do their analysis in a code-first platform, and are forced to move to a propietary UI-based platforms when its time to share. If you've enjoyed the benefits of developer-first tooling, this is a problem: Many modern data use-cases don't fit into the BI paradigm, which is optimized for providing a simple lense on the data warehouse. Having the BI tool as the sole view-layer adds a high fixed cost to data science results. Often data scientists will build everything in Python, only to find they have to transpose it all to a BI tool when they want to share. Data teams often need to process data which is not in the central warehouse. Maybe they want to build an app directly on Stripe or Marketo. In this case, they have to go to third-party SaaS tools and ditch the data team entirely Modern reporting needs to be programmatic. Instead of a filter on a view, end-users often need a set of different reports with completely different components; for instance, to create a custom external report for each of their clients. What value does it provide? Code-first Tile is code-first, which means that you have all of the benefits of versioning, testing, and collaboration which are absent in UI-first tools. It also makes it simple to create reports programmatically. Simple and fast Tile lets you build and share reports in under 5 lines of code. Limitless applications Tile lets you to turn Jupyter notebooks and scripts into full-blown applications which take parameters. This unlocks data teams to provide Integrates with your stack Tile allows you to generate and share reports from inside of wherever you already analyze data. You can immediately use tile inside of PySpark, Airflow, Jupyter, Colab, or Sagemaker. Performance Tile's serverless infrastructure allows it to scale. Maximum compatibility Tile renders the libraries you already use, like Pandas, Plotly, and Altair. The goal of the project is to have maximum compatibility with the rest of the data science ecosystem. Tile's runner is optimized to be compatible with existing Python scripts and Jupyter notebooks, without requiring users to rewrite existing code. Serverless Not all use-cases should require running a server in the cloud. Tile believes in a separation of the presentation layer and execution layer. Tile views are compiled into interactive static pages which you can share as HTML documents. When building an app, execution happens in a serverless fashion.","title":"Why Tile?"},{"location":"learn/why/#why-does-tile-exist","text":"We believe the future of data analysis is open-source and code-first. Data teams are increasing choosing developer-first tools over UI-based platforms. But there is one part of the stack that has very little developer-first tooling: the front-end. We believe the front-end is fundamentally broken because it's currently bundled into big, expensive BI tools. Even though many data scientists do their analysis in a code-first platform, and are forced to move to a propietary UI-based platforms when its time to share. If you've enjoyed the benefits of developer-first tooling, this is a problem: Many modern data use-cases don't fit into the BI paradigm, which is optimized for providing a simple lense on the data warehouse. Having the BI tool as the sole view-layer adds a high fixed cost to data science results. Often data scientists will build everything in Python, only to find they have to transpose it all to a BI tool when they want to share. Data teams often need to process data which is not in the central warehouse. Maybe they want to build an app directly on Stripe or Marketo. In this case, they have to go to third-party SaaS tools and ditch the data team entirely Modern reporting needs to be programmatic. Instead of a filter on a view, end-users often need a set of different reports with completely different components; for instance, to create a custom external report for each of their clients.","title":"Why does Tile exist?"},{"location":"learn/why/#what-value-does-it-provide","text":"","title":"What value does it provide?"},{"location":"learn/why/#code-first","text":"Tile is code-first, which means that you have all of the benefits of versioning, testing, and collaboration which are absent in UI-first tools. It also makes it simple to create reports programmatically.","title":"Code-first"},{"location":"learn/why/#simple-and-fast","text":"Tile lets you build and share reports in under 5 lines of code.","title":"Simple and fast"},{"location":"learn/why/#limitless-applications","text":"Tile lets you to turn Jupyter notebooks and scripts into full-blown applications which take parameters. This unlocks data teams to provide","title":"Limitless applications"},{"location":"learn/why/#integrates-with-your-stack","text":"Tile allows you to generate and share reports from inside of wherever you already analyze data. You can immediately use tile inside of PySpark, Airflow, Jupyter, Colab, or Sagemaker.","title":"Integrates with your stack"},{"location":"learn/why/#performance","text":"Tile's serverless infrastructure allows it to scale.","title":"Performance"},{"location":"learn/why/#maximum-compatibility","text":"Tile renders the libraries you already use, like Pandas, Plotly, and Altair. The goal of the project is to have maximum compatibility with the rest of the data science ecosystem. Tile's runner is optimized to be compatible with existing Python scripts and Jupyter notebooks, without requiring users to rewrite existing code.","title":"Maximum compatibility"},{"location":"learn/why/#serverless","text":"Not all use-cases should require running a server in the cloud. Tile believes in a separation of the presentation layer and execution layer. Tile views are compiled into interactive static pages which you can share as HTML documents. When building an app, execution happens in a serverless fashion.","title":"Serverless"},{"location":"usage-docs/getting-started/","text":"Getting Started Installation Datapane's Python library and CLI can be installed using either conda or pip on macOS, Windows, or Linux. Datapane supports Python 3.6 - 3.9 . Installing Instructions for installing Python can be found at https://wiki.python.org/moin/BeginnersGuide/Download . conda If you use conda , you can install it with: Python Jupyter $ conda install -c conda-forge \"datapane>=0.10.0\" $ datapane hello-world !conda install -c conda-forge \"datapane>=0.10.0\" !datapane hello-world Installing Conda sometimes installs an older version of datapane. If you receive errors, please check the version and try running conda update --all or try in a new conda environment ( conda create -n ENV and conda activate ENV) pip If you use pip , you can install it with: Python Jupyter $ pip3 install -U datapane $ datapane hello-world !pip3 install -U datapane !datapane hello-world Upgrading We upgrade datapane regularly to include new features, both in the client and on the hosted version. From time to time your client may no longer be compatible with the datapane server when uploading a report. If this happens, you will receive an error like the following: IncompatibleVersionError: Your client is out-of-date (version 0.9.2) and may be causing errors, \" please upgrade to version 0.10.2 In such an event, please upgrade your datapane cli via pip or conda and try again. Upgrading via pip If you installed datapane via pip, run the following command: $ pip install -U datapane Upgrading via conda If you installed datapane via conda, run the following command, adding the --all flag if needed. As above, if you receive errors please try using a fresh conda environment. $ conda update datapane OR conda update --all Windows Tips and Troubleshooting We generally recommend installing via conda over pip on Windows as it's easier to install all the required dependencies. If you need to install Python first, the latest versions of Windows 10 can install Python for you automatically - running python from the command-prompt will take you to the Windows Store where you can download an official version . We also strongly recommend using a 64-bit rather than the 32-bit version of Python, you can check this by running the command python -c \"import struct; print(struct.calcsize('P')*8, 'bit')\" from the Command Prompt. $ python -c \"import struct; print(struct.calcsize('P')*8, 'bit')\" Also note that on Windows, you can run the datapane command either by running datapane or datapane.exe on the command-line. Some specific issues you may encounter on Windows include: Import errors when running/importing datapane You may encounter errors such as ImportError: DLL load failed when running datapane or importing it within your Python code. If so, try installing the Visual C++ Redistributables for Windows from Microsoft and running again (you most likely want to download the version for x64, i.e. vc_redist.x64.exe ) Datapane install errors trying to compile pyarrow using Visual C++ This usually occurs when you are running a 32-bit version of Python and installing via pip . Either try using conda or install a 64-bit version of Python (for example from the Windows Store as mentioned above). This may also occur when using Windows 7 - we only support directly Windows 10, however, it may be worth trying to install via conda instead, if you are stuck on Windows 7. 'datapane.exe' is not recognized as an internal or external command This occurs when your Windows %PATH% doesn't include all the Python directories, specifically the Scripts directory. You may notice during the datapane install messages such as (or similar to): The script datapane.exe is installed in 'C:\\users\\<USERNAME>\\appdata\\local\\programs\\python\\python37\\Scripts' which is not on PATH. Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location. To fix this, adjust your %PATH% to include your specific Scripts path as mentioned in the pip warning (see https://datatofish.com/add-python-to-windows-path/ for more detailed instructions). Alternatively, you can try running the datapane client directly, using the command python3.exe -m datapane.client instead. {% hint style=\"info\" %} If you are still having problems installing, please ask on the Datapane Forum , and someone will come to help you. {% endhint %}","title":"Getting Started"},{"location":"usage-docs/getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"usage-docs/getting-started/#installation","text":"Datapane's Python library and CLI can be installed using either conda or pip on macOS, Windows, or Linux. Datapane supports Python 3.6 - 3.9 . Installing Instructions for installing Python can be found at https://wiki.python.org/moin/BeginnersGuide/Download .","title":"Installation"},{"location":"usage-docs/getting-started/#conda","text":"If you use conda , you can install it with: Python Jupyter $ conda install -c conda-forge \"datapane>=0.10.0\" $ datapane hello-world !conda install -c conda-forge \"datapane>=0.10.0\" !datapane hello-world Installing Conda sometimes installs an older version of datapane. If you receive errors, please check the version and try running conda update --all or try in a new conda environment ( conda create -n ENV and conda activate ENV)","title":"conda"},{"location":"usage-docs/getting-started/#pip","text":"If you use pip , you can install it with: Python Jupyter $ pip3 install -U datapane $ datapane hello-world !pip3 install -U datapane !datapane hello-world","title":"pip"},{"location":"usage-docs/getting-started/#upgrading","text":"We upgrade datapane regularly to include new features, both in the client and on the hosted version. From time to time your client may no longer be compatible with the datapane server when uploading a report. If this happens, you will receive an error like the following: IncompatibleVersionError: Your client is out-of-date (version 0.9.2) and may be causing errors, \" please upgrade to version 0.10.2 In such an event, please upgrade your datapane cli via pip or conda and try again. Upgrading via pip If you installed datapane via pip, run the following command: $ pip install -U datapane Upgrading via conda If you installed datapane via conda, run the following command, adding the --all flag if needed. As above, if you receive errors please try using a fresh conda environment. $ conda update datapane OR conda update --all","title":"Upgrading"},{"location":"usage-docs/getting-started/#windows-tips-and-troubleshooting","text":"We generally recommend installing via conda over pip on Windows as it's easier to install all the required dependencies. If you need to install Python first, the latest versions of Windows 10 can install Python for you automatically - running python from the command-prompt will take you to the Windows Store where you can download an official version . We also strongly recommend using a 64-bit rather than the 32-bit version of Python, you can check this by running the command python -c \"import struct; print(struct.calcsize('P')*8, 'bit')\" from the Command Prompt. $ python -c \"import struct; print(struct.calcsize('P')*8, 'bit')\" Also note that on Windows, you can run the datapane command either by running datapane or datapane.exe on the command-line. Some specific issues you may encounter on Windows include:","title":"Windows Tips and Troubleshooting"},{"location":"usage-docs/getting-started/#import-errors-when-runningimporting-datapane","text":"You may encounter errors such as ImportError: DLL load failed when running datapane or importing it within your Python code. If so, try installing the Visual C++ Redistributables for Windows from Microsoft and running again (you most likely want to download the version for x64, i.e. vc_redist.x64.exe )","title":"Import errors when running/importing datapane"},{"location":"usage-docs/getting-started/#datapane-install-errors-trying-to-compile-pyarrow-using-visual-c","text":"This usually occurs when you are running a 32-bit version of Python and installing via pip . Either try using conda or install a 64-bit version of Python (for example from the Windows Store as mentioned above). This may also occur when using Windows 7 - we only support directly Windows 10, however, it may be worth trying to install via conda instead, if you are stuck on Windows 7.","title":"Datapane install errors trying to compile pyarrow using Visual C++"},{"location":"usage-docs/getting-started/#datapaneexe-is-not-recognized-as-an-internal-or-external-command","text":"This occurs when your Windows %PATH% doesn't include all the Python directories, specifically the Scripts directory. You may notice during the datapane install messages such as (or similar to): The script datapane.exe is installed in 'C:\\users\\<USERNAME>\\appdata\\local\\programs\\python\\python37\\Scripts' which is not on PATH. Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location. To fix this, adjust your %PATH% to include your specific Scripts path as mentioned in the pip warning (see https://datatofish.com/add-python-to-windows-path/ for more detailed instructions). Alternatively, you can try running the datapane client directly, using the command python3.exe -m datapane.client instead. {% hint style=\"info\" %} If you are still having problems installing, please ask on the Datapane Forum , and someone will come to help you. {% endhint %}","title":"'datapane.exe' is not recognized as an internal or external command"}]}