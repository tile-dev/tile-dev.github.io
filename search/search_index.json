{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introducing Tile: A Comprehensive Python Toolkit for Data Application Development Tile is an open-source Python toolkit designed to help developers build, deploy, and run full-stack data applications with ease. It offers a complete data stack in a box, including features for ELT (Extract, Load, Transform), application servers, task management, integrations, and notifications. Tile simplifies the data application development process by handling underlying complexities, allowing developers to focus on creating robust data-driven solutions. Get started with Tile and develop scalable, efficient, and maintainable data applications. Architecture \u00b6 Tile is comprised of multiple new and reused open-source components that are carefully connected to gether to provide a highly functionality toolkit for building data products. See Architecture for more information. Tile Project Architecture Process \u00b6 Tile is more than the core SDK and components for building data products, and handles entire development lifecycle, including the deployment and running of Tile Apps. We provide a code-first approach that uses many best practices of the devops ecosystem, including CI and containers, and run user's applications single-tenant on our custom Tile OS running the Tile Server. This easily allows you to build and deploy multiple packages all running on the same, high-performance server and accessible by all your users. flowchart LR A[Code] --> |Commit| A A --> |Push| B[GitHub] B --> |CI Build| C[Docker] C --> |Deploy| D D(Tile Server) -->|Runs| E(Marketing Analysis Product) Why use it \u00b6 Tile enables developers to build production-ready data applications efficiently. By handling the underlying complexities and providing a robust set of tools, Tile streamlines the development process and reduces the time and effort required to create reliable, high-performance applications. Data applications are essential for sharing insights with stakeholders. They allow for the effective communication of complex data-driven findings through visualizations, dashboards, and reports. Tile simplifies this process by offering built-in integrations and tools for creating these data visualizations, making it easier for developers to present valuable insights to decision-makers. Tile facilitates the development and management of internal and custom data-driven processes. Developers can create tailored solutions that automate data extraction, transformation, and analysis, resulting in more efficient workflows and better-informed decision-making. By using Tile, developers can focus on solving specific business problems with data-driven applications that are designed to meet their unique needs. Benefits \u00b6 Tile offers numerous benefits to developers, making it an excellent choice for data application development. Some of these advantages include: Data application development: Tile simplifies the process of building, deploying, and running full-stack data applications, allowing developers to create powerful solutions with less effort. ELT (Extract, Load, Transform): Tile provides built-in support for ELT processes, enabling developers to efficiently handle data extraction, loading, and transformation within their applications. Notifications: With Tile's notification system, developers can easily set up alerts and keep stakeholders informed about important events and updates related to their data applications. Integrations: Tile offers a range of pre-built integrations, allowing developers to seamlessly connect their data applications with other services and tools, enhancing their functionality and enabling data-driven decision-making across platforms. Analytics database: Tile includes support for analytics databases, enabling developers to store, query, and analyze large volumes of data efficiently within their applications. Background and scheduled tasks: Tile simplifies the management of background and scheduled tasks, allowing developers to automate processes and run data-driven tasks at specific intervals or in response to specific events. By leveraging these benefits, developers can create scalable, efficient, and maintainable data applications that meet their unique needs and drive business growth. Community \u00b6 GitHub Our centre of gravity is our GitHub where we build in the open. Come and get involved! Forums We host the Data Developer forum for all things to do with building data apps and frontends. Come and say hi! Twitter For updates, make sure to follow the Tile project on Twitter.","title":"Home"},{"location":"#architecture","text":"Tile is comprised of multiple new and reused open-source components that are carefully connected to gether to provide a highly functionality toolkit for building data products. See Architecture for more information. Tile Project Architecture","title":"Architecture"},{"location":"#process","text":"Tile is more than the core SDK and components for building data products, and handles entire development lifecycle, including the deployment and running of Tile Apps. We provide a code-first approach that uses many best practices of the devops ecosystem, including CI and containers, and run user's applications single-tenant on our custom Tile OS running the Tile Server. This easily allows you to build and deploy multiple packages all running on the same, high-performance server and accessible by all your users. flowchart LR A[Code] --> |Commit| A A --> |Push| B[GitHub] B --> |CI Build| C[Docker] C --> |Deploy| D D(Tile Server) -->|Runs| E(Marketing Analysis Product)","title":"Process"},{"location":"#why-use-it","text":"Tile enables developers to build production-ready data applications efficiently. By handling the underlying complexities and providing a robust set of tools, Tile streamlines the development process and reduces the time and effort required to create reliable, high-performance applications. Data applications are essential for sharing insights with stakeholders. They allow for the effective communication of complex data-driven findings through visualizations, dashboards, and reports. Tile simplifies this process by offering built-in integrations and tools for creating these data visualizations, making it easier for developers to present valuable insights to decision-makers. Tile facilitates the development and management of internal and custom data-driven processes. Developers can create tailored solutions that automate data extraction, transformation, and analysis, resulting in more efficient workflows and better-informed decision-making. By using Tile, developers can focus on solving specific business problems with data-driven applications that are designed to meet their unique needs.","title":"Why use it"},{"location":"#benefits","text":"Tile offers numerous benefits to developers, making it an excellent choice for data application development. Some of these advantages include: Data application development: Tile simplifies the process of building, deploying, and running full-stack data applications, allowing developers to create powerful solutions with less effort. ELT (Extract, Load, Transform): Tile provides built-in support for ELT processes, enabling developers to efficiently handle data extraction, loading, and transformation within their applications. Notifications: With Tile's notification system, developers can easily set up alerts and keep stakeholders informed about important events and updates related to their data applications. Integrations: Tile offers a range of pre-built integrations, allowing developers to seamlessly connect their data applications with other services and tools, enhancing their functionality and enabling data-driven decision-making across platforms. Analytics database: Tile includes support for analytics databases, enabling developers to store, query, and analyze large volumes of data efficiently within their applications. Background and scheduled tasks: Tile simplifies the management of background and scheduled tasks, allowing developers to automate processes and run data-driven tasks at specific intervals or in response to specific events. By leveraging these benefits, developers can create scalable, efficient, and maintainable data applications that meet their unique needs and drive business growth.","title":"Benefits"},{"location":"#community","text":"GitHub Our centre of gravity is our GitHub where we build in the open. Come and get involved! Forums We host the Data Developer forum for all things to do with building data apps and frontends. Come and say hi! Twitter For updates, make sure to follow the Tile project on Twitter.","title":"Community"},{"location":"architecture/","text":"Tile is architected to provide all the features you need to build robust and production-ready Data Projects, essentially a Data SDK in a box . Tile is built from multiple components that have been selected to work well together - we build on top of great open-source tools in the Python ecosystem, connecting them together and providing a integrated way to make use of them all. Tile Project Architecture Components \u00b6 Tile is split up into multiple sections comprised of several components - below we'll list a few of them and how they help you build Data Products. Analytics Code \u00b6 Tile uses the Datapane Python library to provide support for building Application Servers, Reports, and Dashboards that make up your project. You can use Datapane with many popular Python data science libraries, such as Pandas, Altair, Matplotlib,and more, and it works direct from Jupyter. Reportings and Dashboarding \u00b6 Datapane provides data reporting and dashboard functionality, which allows users to create visually engaging reports and interactive dashboards. This helps you communicate insights effectively and enables stakeholders to make data-driven decisions. By providing clear visualizations and a user-friendly interface, developers can easily share their findings and monitor key performance indicators within their applications. Datapane Components \u00b6 Datapane provides a suite of Python-based components and functions designed to perform live data analysis. Create and reuse components that allow you to process and analyze data in real-time, enabling them to uncover insights and make data-driven decisions quickly. By providing a Python-centric approach, your code can benefit from the language's extensive libraries and familiar syntax while building responsive, high-performance data-driven applications. Datapane Tasks \u00b6 Our open-source Python project includes features for managing background and scheduled tasks, which automate updates of datasets and the execution of analytics code. These capabilities allow developers to set up routine data refreshes and run analysis tasks without manual intervention, ensuring timely insights and efficient resource usage. By automating these processes, users can concentrate on exploring data and developing valuable applications, while the system effectively handles the underlying tasks. App Databases \u00b6 Your Data Products may need to store application-specific data that is independent of your analytics data, such as user preferences, for instance. To support this, Tile provides multiple persistance options for your Data Applications, including Document Databases )like Mongo DB), persistent caches, and Blob Storage (such as S3). These can be updated automatically, or as part of scheduled tasks, for instance to update a trained model out-of-band for use within a Data Product. ELT \u00b6 Our ELT functionality empowers users to efficiently extract data from a wide array of sources, including databases, APIs, and file formats, ensuring seamless integration with virtually any data source. Once the data is extracted, it is loaded the projects OLAP DBfor further transformation, allowing for tailored manipulation and analysis. By simplifying and automating the data ingestion process, Tile saves valuable time and resources, enabling developers and data scientists to focus on building applications and uncovering insights from their data. Orchestration \u00b6 Easily build, run, and orchestrate data pipelines - allowing you to efficiently manage, schedule, and monitor multiple data processing tasks, ensuring that dependencies are met and errors are handled gracefully. By automating and centralizing pipeline management, Tile projects eliminates manual intervention, reduces operational overhead, and accelerates your path to insights. Transformations \u00b6 Leverage the versatility of SQL and Python data transformations in our open-source Python project, enabling users to harness the power of familiar query languages and scripting. This feature allows for seamless manipulation and cleaning of data, catering to a wide range of analytical requirements. Benefit from the flexibility of both SQL and Python, and supercharge your data-driven applications with efficient, adaptable data transformations. Connections \u00b6 Experience seamless data connections with our open-source Python project, offering built-in support for Singer Taps and Meltano integrations. Effortlessly connect to numerous data sources and enjoy streamlined data extraction, ensuring compatibility and adaptability for your data-driven applications. Capitalize on the convenience of reliable data connections and elevate your data workflows with our versatile integration options. OLAP Database \u00b6 We use DuckDB as our OLAP (Online Analytical Processing) databases for Tile to enhance your data analysis capabilities. DuckDB provides efficient, multidimensional data analysis, making it easier to explore and manipulate large datasets in real-time. By integrating DuckDB, you can easily use both SQL and Python to rapidly work with large datasets, transform them and persist them trivially within your applications. Input / Output \u00b6 Notifications \u00b6 Tile offers support for popular communication channels like Slack, Teams, and Email. Use notifications to help users stay informed about the progress and status of their data-driven applications, as well as send timely alerts for critical events or errors. By integrating these notification options, developers can ensure effective communication, improved collaboration, and prompt issue resolution within their teams. Integrations \u00b6 Tile comes with integrations built-in to work with external products, such as SaaS APIs, via webhooks. Python tasks can be scheduled to run in the background to perform batch processing. We also provide integrations into multiple LLMs via LangChain enabling the automated analysis of data. Management \u00b6 User Management \u00b6 Tile comes with user management out of the box, so you can efficiently handle permissions, Role-Based Access Control (RBAC), and SAML-based single sign-on. This functionality allows you to define and manage access levels for different users, ensuring data security and compliance within your application. By providing granular control over user access, developers can build Data Projects effectively while safeguarding sensitive information and maintaining a secure environment. Admin \u00b6 Tile provide essential tools for logging, monitoring, deployment, and versioning. These capabilities enable developers to maintain robust applications by tracking system activity, monitoring performance, managing deployments, and handling version control. By offering comprehensive administrative support, Tile ensures that users can effectively manage their applications, optimize performance, and maintain a transparent development process.","title":"Architecture"},{"location":"architecture/#components","text":"Tile is split up into multiple sections comprised of several components - below we'll list a few of them and how they help you build Data Products.","title":"Components"},{"location":"architecture/#analytics-code","text":"Tile uses the Datapane Python library to provide support for building Application Servers, Reports, and Dashboards that make up your project. You can use Datapane with many popular Python data science libraries, such as Pandas, Altair, Matplotlib,and more, and it works direct from Jupyter.","title":"Analytics Code"},{"location":"architecture/#reportings-and-dashboarding","text":"Datapane provides data reporting and dashboard functionality, which allows users to create visually engaging reports and interactive dashboards. This helps you communicate insights effectively and enables stakeholders to make data-driven decisions. By providing clear visualizations and a user-friendly interface, developers can easily share their findings and monitor key performance indicators within their applications.","title":"Reportings and Dashboarding"},{"location":"architecture/#datapane-components","text":"Datapane provides a suite of Python-based components and functions designed to perform live data analysis. Create and reuse components that allow you to process and analyze data in real-time, enabling them to uncover insights and make data-driven decisions quickly. By providing a Python-centric approach, your code can benefit from the language's extensive libraries and familiar syntax while building responsive, high-performance data-driven applications.","title":"Datapane Components"},{"location":"architecture/#datapane-tasks","text":"Our open-source Python project includes features for managing background and scheduled tasks, which automate updates of datasets and the execution of analytics code. These capabilities allow developers to set up routine data refreshes and run analysis tasks without manual intervention, ensuring timely insights and efficient resource usage. By automating these processes, users can concentrate on exploring data and developing valuable applications, while the system effectively handles the underlying tasks.","title":"Datapane Tasks"},{"location":"architecture/#app-databases","text":"Your Data Products may need to store application-specific data that is independent of your analytics data, such as user preferences, for instance. To support this, Tile provides multiple persistance options for your Data Applications, including Document Databases )like Mongo DB), persistent caches, and Blob Storage (such as S3). These can be updated automatically, or as part of scheduled tasks, for instance to update a trained model out-of-band for use within a Data Product.","title":"App Databases"},{"location":"architecture/#elt","text":"Our ELT functionality empowers users to efficiently extract data from a wide array of sources, including databases, APIs, and file formats, ensuring seamless integration with virtually any data source. Once the data is extracted, it is loaded the projects OLAP DBfor further transformation, allowing for tailored manipulation and analysis. By simplifying and automating the data ingestion process, Tile saves valuable time and resources, enabling developers and data scientists to focus on building applications and uncovering insights from their data.","title":"ELT"},{"location":"architecture/#orchestration","text":"Easily build, run, and orchestrate data pipelines - allowing you to efficiently manage, schedule, and monitor multiple data processing tasks, ensuring that dependencies are met and errors are handled gracefully. By automating and centralizing pipeline management, Tile projects eliminates manual intervention, reduces operational overhead, and accelerates your path to insights.","title":"Orchestration"},{"location":"architecture/#transformations","text":"Leverage the versatility of SQL and Python data transformations in our open-source Python project, enabling users to harness the power of familiar query languages and scripting. This feature allows for seamless manipulation and cleaning of data, catering to a wide range of analytical requirements. Benefit from the flexibility of both SQL and Python, and supercharge your data-driven applications with efficient, adaptable data transformations.","title":"Transformations"},{"location":"architecture/#connections","text":"Experience seamless data connections with our open-source Python project, offering built-in support for Singer Taps and Meltano integrations. Effortlessly connect to numerous data sources and enjoy streamlined data extraction, ensuring compatibility and adaptability for your data-driven applications. Capitalize on the convenience of reliable data connections and elevate your data workflows with our versatile integration options.","title":"Connections"},{"location":"architecture/#olap-database","text":"We use DuckDB as our OLAP (Online Analytical Processing) databases for Tile to enhance your data analysis capabilities. DuckDB provides efficient, multidimensional data analysis, making it easier to explore and manipulate large datasets in real-time. By integrating DuckDB, you can easily use both SQL and Python to rapidly work with large datasets, transform them and persist them trivially within your applications.","title":"OLAP Database"},{"location":"architecture/#input-output","text":"","title":"Input / Output"},{"location":"architecture/#notifications","text":"Tile offers support for popular communication channels like Slack, Teams, and Email. Use notifications to help users stay informed about the progress and status of their data-driven applications, as well as send timely alerts for critical events or errors. By integrating these notification options, developers can ensure effective communication, improved collaboration, and prompt issue resolution within their teams.","title":"Notifications"},{"location":"architecture/#integrations","text":"Tile comes with integrations built-in to work with external products, such as SaaS APIs, via webhooks. Python tasks can be scheduled to run in the background to perform batch processing. We also provide integrations into multiple LLMs via LangChain enabling the automated analysis of data.","title":"Integrations"},{"location":"architecture/#management","text":"","title":"Management"},{"location":"architecture/#user-management","text":"Tile comes with user management out of the box, so you can efficiently handle permissions, Role-Based Access Control (RBAC), and SAML-based single sign-on. This functionality allows you to define and manage access levels for different users, ensuring data security and compliance within your application. By providing granular control over user access, developers can build Data Projects effectively while safeguarding sensitive information and maintaining a secure environment.","title":"User Management"},{"location":"architecture/#admin","text":"Tile provide essential tools for logging, monitoring, deployment, and versioning. These capabilities enable developers to maintain robust applications by tracking system activity, monitoring performance, managing deployments, and handling version control. By offering comprehensive administrative support, Tile ensures that users can effectively manage their applications, optimize performance, and maintain a transparent development process.","title":"Admin"},{"location":"philosophy/","text":"The design of Tile is based around our, quite specific, ideas of how to build modern data applications that takes advantage of upcoming trends in the data and infrastructure space. Much of this is in opposition to the large-scale, distributed, Big Data and micro-services-heavy \"Modern Data Stack\" that we believe simply results in over-complex, fragile and over-engineered systems that very often don't actually provide value to their users or stakeholders. Single-node over multi-node \u00b6 Single node machines are really fast and just getting faster, yet tools like Spark turn all data processing issues into multi-node concerns. We think that as the core-counts increase and as tooling becomes more sophisticated, e.g. DuckDB and Apache Arrow, this tradeoff no longer makes sense for many traditional enterprise use-cases. The limits of what are possible on a single node machine, or even a developer laptop, are becoming far larger and can fit within a single node. Moving to multiple nodes drastically decreased latency whilst increasing the range of potential issues. Similar issues occur on the application side, where the general wisdom when building a complex data product with many endpoints, tasks, and integrations would be to use a tool like Kubernetes. However again we believe that for an internal enterprise use-case, it is much simpler and more reliable to use a fast, multi-core single node machine along with more low-maintenance deployment solutions like Docker. For Tile's on-prem and enterprise hosted options, we believe that as providing a single-node VM per customer is the right approach here, in terms of isolating a customer's data, performance, reliability and ease of maintenance and upgrading. The Modern Data Stack is overkill \u00b6 We don't believe that the \"Modern Data Stack\" - comprised of loading large amounts of data into Data Warehouses and Data Lakes like Snowflake or Redshift, then using tools like dbt and distributed processors like Spark, are at all suitable for all domains and scales. For most enterprise use-cases, especially for internal tooling that Tile is aimed at, for instance Marketing Analytics, HR Analytics Developer Analytics and more, the datasets involved can fit within a single machine and we can utilize a much simpler and more reliable set of technologies, like DuckDB, polars, pandas, and more. This is much simpler to manage and maintain, whilst still being faster for the intended use-cases. Python is the lingua franca for data analysis \u00b6 There are many languages that can be used for data analysis, such as R, Matlab, Julia, Scala and more - however we believe that Python is uniquely positioned to be the common language used for all data related tasks in the near-mid future. Functionally as a glue-code, the size of the community and strength of the Python ecosystem means that there are libraries and tools work with all the core data analytics tasks, including libraries like Pandas, Polars, DIEs like Jupyter, and libraries to work with ML, cloud infrastructure, SaaS APIs and more. BI tools based on SQL, such as Tableau, simply don't have the power, ecosystem, or flexibility to provide what is needed for modern companies to stay ahead. A Data Application Layer is not enough \u00b6 There are many tools for building \"data apps\" in Python to provide interactive plots and tables, such as Streamlit, Dash, Voila, and others. We believe that tools like Streamlit are great for quickly building demos and generating \"Interactive Powerpoints\" by the data team to demo to stakeholders. However we've found they they are often of temporary use only at the time and are not maintained or used after. We've found that they are missing many features that make them not capable of forming the basis of fully-featured internal data products. At Tile we have built Datapane, which is a really simple, React and HTMX-inspired data application framework that also provide a way to build reports, dashboards, and reusable components that can all be combined together to build interactive data driven applications directly in Python and Jupyter without requiring any Javascript. Datapane support a wide range of features required by product-grade data projects, including background tasks, integrated analytics databases, and user / permissions support. The Tile data stack uses the Datapane Server framework to support Python analytics code, The Datapane server framework is a large and important part of the Tile data stack, which when combined with the other components in the system, allows you to easily build, deploy and run enterprise ready internal data applications rather than demos and \"Interactive Powerpoints\".","title":"Philosophy"},{"location":"philosophy/#single-node-over-multi-node","text":"Single node machines are really fast and just getting faster, yet tools like Spark turn all data processing issues into multi-node concerns. We think that as the core-counts increase and as tooling becomes more sophisticated, e.g. DuckDB and Apache Arrow, this tradeoff no longer makes sense for many traditional enterprise use-cases. The limits of what are possible on a single node machine, or even a developer laptop, are becoming far larger and can fit within a single node. Moving to multiple nodes drastically decreased latency whilst increasing the range of potential issues. Similar issues occur on the application side, where the general wisdom when building a complex data product with many endpoints, tasks, and integrations would be to use a tool like Kubernetes. However again we believe that for an internal enterprise use-case, it is much simpler and more reliable to use a fast, multi-core single node machine along with more low-maintenance deployment solutions like Docker. For Tile's on-prem and enterprise hosted options, we believe that as providing a single-node VM per customer is the right approach here, in terms of isolating a customer's data, performance, reliability and ease of maintenance and upgrading.","title":"Single-node over multi-node"},{"location":"philosophy/#the-modern-data-stack-is-overkill","text":"We don't believe that the \"Modern Data Stack\" - comprised of loading large amounts of data into Data Warehouses and Data Lakes like Snowflake or Redshift, then using tools like dbt and distributed processors like Spark, are at all suitable for all domains and scales. For most enterprise use-cases, especially for internal tooling that Tile is aimed at, for instance Marketing Analytics, HR Analytics Developer Analytics and more, the datasets involved can fit within a single machine and we can utilize a much simpler and more reliable set of technologies, like DuckDB, polars, pandas, and more. This is much simpler to manage and maintain, whilst still being faster for the intended use-cases.","title":"The Modern Data Stack is overkill"},{"location":"philosophy/#python-is-the-lingua-franca-for-data-analysis","text":"There are many languages that can be used for data analysis, such as R, Matlab, Julia, Scala and more - however we believe that Python is uniquely positioned to be the common language used for all data related tasks in the near-mid future. Functionally as a glue-code, the size of the community and strength of the Python ecosystem means that there are libraries and tools work with all the core data analytics tasks, including libraries like Pandas, Polars, DIEs like Jupyter, and libraries to work with ML, cloud infrastructure, SaaS APIs and more. BI tools based on SQL, such as Tableau, simply don't have the power, ecosystem, or flexibility to provide what is needed for modern companies to stay ahead.","title":"Python is the lingua franca for data analysis"},{"location":"philosophy/#a-data-application-layer-is-not-enough","text":"There are many tools for building \"data apps\" in Python to provide interactive plots and tables, such as Streamlit, Dash, Voila, and others. We believe that tools like Streamlit are great for quickly building demos and generating \"Interactive Powerpoints\" by the data team to demo to stakeholders. However we've found they they are often of temporary use only at the time and are not maintained or used after. We've found that they are missing many features that make them not capable of forming the basis of fully-featured internal data products. At Tile we have built Datapane, which is a really simple, React and HTMX-inspired data application framework that also provide a way to build reports, dashboards, and reusable components that can all be combined together to build interactive data driven applications directly in Python and Jupyter without requiring any Javascript. Datapane support a wide range of features required by product-grade data projects, including background tasks, integrated analytics databases, and user / permissions support. The Tile data stack uses the Datapane Server framework to support Python analytics code, The Datapane server framework is a large and important part of the Tile data stack, which when combined with the other components in the system, allows you to easily build, deploy and run enterprise ready internal data applications rather than demos and \"Interactive Powerpoints\".","title":"A Data Application Layer is not enough"},{"location":"solutions/","text":"Lorem ipsum \u00b6 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"Solutions"},{"location":"solutions/#lorem-ipsum","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"Lorem ipsum"},{"location":"templates/","text":"Tile provides an marketplace consisting of several prebuilt Tile project templates and data products that you can directly install into your Tile Server. You can always built your own products, however we recommend using this and customizing them as starting points for specific use-cases. All our templates are available on GitHub, you can clone them, customize as needed, for instance to work with your data sources, and run them immediately. That are all free to use and come with no restrictions, however certain features may be require a higher-tier plans on your Tile Server. Our templates are all open-source, please feel free to suggest improvements and even make PRs - we love contributions! Some of our templates include: HR Analytics \u00b6 Our HR Analytics application is a practical tool designed for HR teams within organizations. This data-driven application helps in analyzing employee performance, attrition, engagement, and talent management by consolidating data from various sources. Using the features from Tile, HR teams can easily work with data and generate useful insights. A valuable feature of this application is its predictive analytics capabilities, enabling HR professionals to anticipate employee turnover, pinpoint potential high-performers, and address workforce trends in a timely manner. Organizations can develop a more efficient and productive workforce, contributing to the company's long-term objectives. Marketing Analytics \u00b6 This is a practical solution designed for online marketing teams within B2C and D2C small and medium-sized enterprises (SMEs). This application helps marketing professionals track, analyze, and optimize their digital marketing campaigns by consolidating data from various channels like social media, email, and paid advertising. Tile simplifies data processing and visualization, allowing users to focus on generating actionable insights. A notable feature of this application is the ability to perform multi-channel attribution analysis, which enables marketing teams to identify the most effective channels for customer acquisition and engagement. SMEs can improve their marketing ROI, make data-driven decisions, and allocate resources more efficiently for better campaign performance. E-Commerce Marketplace Analytics \u00b6 The E-Commerce Analytics application is a versatile tool tailored for online stores, including those on platforms like Shopify and SquareSpace. This application enables store owners to better understand customer behavior, sales patterns, and inventory management by aggregating and analyzing data from multiple sources. The product makes it is easy for users to process and visualize relevant data, leading to actionable insights. An essential feature of this application is its cross-platform compatibility, allowing for seamless integration with various E-Commerce platforms and data sources. The E-Commerce Analytics application allows online store owners can make informed decisions, optimize sales strategies, and manage inventory effectively, ultimately driving business growth and success. Development Insights \u00b6 The Developer Productivity Analytics application is an efficient solution created for software engineering leads and managers. This application facilitates the analysis of team productivity and code quality by connecting with source control systems like GitHub and GitLab. Users can easily process, visualize, and understand relevant data, transforming it into meaningful insights. A significant feature of this application is its seamless integration with popular version control platforms, allowing for real-time monitoring of code commits, pull requests, and issue resolution. With the Developer Productivity Analytics application, software engineering leads can identify bottlenecks, improve workflows, and foster a more productive and collaborative development environment, ultimately leading to higher-quality software products.","title":"Package Templates"},{"location":"templates/#hr-analytics","text":"Our HR Analytics application is a practical tool designed for HR teams within organizations. This data-driven application helps in analyzing employee performance, attrition, engagement, and talent management by consolidating data from various sources. Using the features from Tile, HR teams can easily work with data and generate useful insights. A valuable feature of this application is its predictive analytics capabilities, enabling HR professionals to anticipate employee turnover, pinpoint potential high-performers, and address workforce trends in a timely manner. Organizations can develop a more efficient and productive workforce, contributing to the company's long-term objectives.","title":"HR Analytics"},{"location":"templates/#marketing-analytics","text":"This is a practical solution designed for online marketing teams within B2C and D2C small and medium-sized enterprises (SMEs). This application helps marketing professionals track, analyze, and optimize their digital marketing campaigns by consolidating data from various channels like social media, email, and paid advertising. Tile simplifies data processing and visualization, allowing users to focus on generating actionable insights. A notable feature of this application is the ability to perform multi-channel attribution analysis, which enables marketing teams to identify the most effective channels for customer acquisition and engagement. SMEs can improve their marketing ROI, make data-driven decisions, and allocate resources more efficiently for better campaign performance.","title":"Marketing Analytics"},{"location":"templates/#e-commerce-marketplace-analytics","text":"The E-Commerce Analytics application is a versatile tool tailored for online stores, including those on platforms like Shopify and SquareSpace. This application enables store owners to better understand customer behavior, sales patterns, and inventory management by aggregating and analyzing data from multiple sources. The product makes it is easy for users to process and visualize relevant data, leading to actionable insights. An essential feature of this application is its cross-platform compatibility, allowing for seamless integration with various E-Commerce platforms and data sources. The E-Commerce Analytics application allows online store owners can make informed decisions, optimize sales strategies, and manage inventory effectively, ultimately driving business growth and success.","title":"E-Commerce Marketplace Analytics"},{"location":"templates/#development-insights","text":"The Developer Productivity Analytics application is an efficient solution created for software engineering leads and managers. This application facilitates the analysis of team productivity and code quality by connecting with source control systems like GitHub and GitLab. Users can easily process, visualize, and understand relevant data, transforming it into meaningful insights. A significant feature of this application is its seamless integration with popular version control platforms, allowing for real-time monitoring of code commits, pull requests, and issue resolution. With the Developer Productivity Analytics application, software engineering leads can identify bottlenecks, improve workflows, and foster a more productive and collaborative development environment, ultimately leading to higher-quality software products.","title":"Development Insights"},{"location":"dev/","text":"Overview \u00b6 Tile is designed to be a high-level system and format that comprised all the components that make up a Tile project . Tile is comprised to two main sections, the Tile Server and Tile Projects . You can build multiple Tile projects, such as a Marketing Analytics Application, and deploy them to your Tile Server, where admins can manage the project, configuring, and more. erDiagram Server ||..o{ Projects : runs","title":"Overview"},{"location":"dev/#overview","text":"Tile is designed to be a high-level system and format that comprised all the components that make up a Tile project . Tile is comprised to two main sections, the Tile Server and Tile Projects . You can build multiple Tile projects, such as a Marketing Analytics Application, and deploy them to your Tile Server, where admins can manage the project, configuring, and more. erDiagram Server ||..o{ Projects : runs","title":"Overview"},{"location":"dev/lifecycle/","text":"Tile projects has a common structure and lifecycle that drastically simplifies building and maintaining Tile Data Products. In this section we'll go through these steps: flowchart LR A[Code] --> |Commit| A A --> |Push| B[GitHub] B --> |CI Build| C[Docker] C --> |Deploy| D D(Tile Server) -->|Runs| E(Marketing Analysis Product) Code Development \u00b6 As described previously , it's easy to configure and build your Tile project. You can test most of your project locally during development, including using Datapanes inline Jupyter support. We recommend you build most of your Python code as functions, that you can easily mock and test during development to check that they are working as intended. Tile also supports building a mock version of your system for running locally via Docker, so you can test how your product operates as a whole when working with it locally. To do this, simply run, $ tile debug Building and Deployment \u00b6 Server Configuration \u00b6 To deploy your project, you first need to configure your Tile Server, this can be done by running the following from the command-line $ tile setup --server ${ SERVER } --token { $TOKEN } where $SERVER and $TOKEN are values taking from the Tile Server management console. Building \u00b6 Tile projects are built as a collection of networked and codependent container images that represent your entire project, from the Application code, to tasks, and ELT pipelines. The resulting images are pushed to Tile Server which runs them via our customised and robust continuer runtime system. Deployment \u00b6 To deploy your tile project, you can run the following from your project directory $ tile deploy [ --config config.py ] This will build and deploy your tile project to the Tile Server. From there you can configure it further and access it via the Tile Server interface. Note Deployment requires Docker to be installed, even on Windows and Mac. We generally recommend using the GitOps flow instead to reduce requirements and enable a collaborative workflow Version Control and CI \u00b6 Tile used a GitOps workflow, where every Tile Project is intended to be committed and versioned via git . Upon pushing your changes upstream, we recommend setting up a CI flow, for instance via GitHub Actions, that automate testing your project and deploying it automatically. We have built a pre-ready GitHub Action that you can use directly within your pipelines to ease this process. You can configure the pipeline to deploy upon your own requirements, for instance upon a git tag or when pushing to a specific branch. The commit hash is used as a unique version of your tile project that is used to version it upon deployment. The advantage of a GitOps flow is that you have a reproducible, audited and collaborative process to handle Tile deployments that is independent of your local developer environment. Updates \u00b6 When using a Git-based flow, updating your tile project becomes very easy. Simply make your changes, commit and push to your upstream repo, triggering your automated deployment as needed. This results in a new version of the product being built and deployed to your Tile Server. Migrations \u00b6 As part of updating your code, you may need to run migration scripts to ensure that previously stored data is updated to work with the new analytics code. Tile supports migrations that can be run as part of a new deployment - these can be specified within the config.py and are run by the Server as needed.","title":"Lifecycle"},{"location":"dev/lifecycle/#code-development","text":"As described previously , it's easy to configure and build your Tile project. You can test most of your project locally during development, including using Datapanes inline Jupyter support. We recommend you build most of your Python code as functions, that you can easily mock and test during development to check that they are working as intended. Tile also supports building a mock version of your system for running locally via Docker, so you can test how your product operates as a whole when working with it locally. To do this, simply run, $ tile debug","title":"Code Development"},{"location":"dev/lifecycle/#building-and-deployment","text":"","title":"Building and Deployment"},{"location":"dev/lifecycle/#server-configuration","text":"To deploy your project, you first need to configure your Tile Server, this can be done by running the following from the command-line $ tile setup --server ${ SERVER } --token { $TOKEN } where $SERVER and $TOKEN are values taking from the Tile Server management console.","title":"Server Configuration"},{"location":"dev/lifecycle/#building","text":"Tile projects are built as a collection of networked and codependent container images that represent your entire project, from the Application code, to tasks, and ELT pipelines. The resulting images are pushed to Tile Server which runs them via our customised and robust continuer runtime system.","title":"Building"},{"location":"dev/lifecycle/#deployment","text":"To deploy your tile project, you can run the following from your project directory $ tile deploy [ --config config.py ] This will build and deploy your tile project to the Tile Server. From there you can configure it further and access it via the Tile Server interface. Note Deployment requires Docker to be installed, even on Windows and Mac. We generally recommend using the GitOps flow instead to reduce requirements and enable a collaborative workflow","title":"Deployment"},{"location":"dev/lifecycle/#version-control-and-ci","text":"Tile used a GitOps workflow, where every Tile Project is intended to be committed and versioned via git . Upon pushing your changes upstream, we recommend setting up a CI flow, for instance via GitHub Actions, that automate testing your project and deploying it automatically. We have built a pre-ready GitHub Action that you can use directly within your pipelines to ease this process. You can configure the pipeline to deploy upon your own requirements, for instance upon a git tag or when pushing to a specific branch. The commit hash is used as a unique version of your tile project that is used to version it upon deployment. The advantage of a GitOps flow is that you have a reproducible, audited and collaborative process to handle Tile deployments that is independent of your local developer environment.","title":"Version Control and CI"},{"location":"dev/lifecycle/#updates","text":"When using a Git-based flow, updating your tile project becomes very easy. Simply make your changes, commit and push to your upstream repo, triggering your automated deployment as needed. This results in a new version of the product being built and deployed to your Tile Server.","title":"Updates"},{"location":"dev/lifecycle/#migrations","text":"As part of updating your code, you may need to run migration scripts to ensure that previously stored data is updated to work with the new analytics code. Tile supports migrations that can be run as part of a new deployment - these can be specified within the config.py and are run by the Server as needed.","title":"Migrations"},{"location":"dev/projects/","text":"Developing a Tile project is super simple, and there are several reference projects and templates freely available on GitHub that you can use to get started with. By default a Tile project includes everything needed to build, run, and deploy an internal Data Project. Workflow \u00b6 The steps invovled in building a Tile project include, flowchart LR A(Configure) --> B(Develop) B --> C(Deploy) Configuring the Tile project Developing the Python application and workflow functions Deploying your Tile project Configuration \u00b6 Tile opts for convention over configuration, and projects can be easily defined and follow sensible defaults. Tile projects are defined within a directory and are configured via two complementary methods, - The filesystem layout - the config.py Python-based Tile project configuration Each directory represents a tile project, that we recommend forms it's own git repository, and from there can be deployed to a Tile Server (see lifecycle ). Directory Layout \u00b6 Tile projects follow a known filesystem layout, to make jumping between projects much simpler. The layout below describes that basic layout of a Tile Project, including the configuration and all python code and data used for the solution. my-tile-project/ \u2502 # tile configuration \u251c\u2500 config.py \u2502 # datapane server views and tasks \u251c\u2500 app.py | app.ipynb \u251c\u2500 tasks.py \u2502 # supporting python modules \u251c\u2500 a.py \u251c\u2500 b/ \u2502 \u2514\u2500 c.py \u2502 # persistent data within the /data dir \u251c\u2500 data/ \u2502 \u251c\u2500 model.pkl \u2502 \u2514\u2500 users.db \u2502 # python packages \u251c\u2500 requirements.txt \u251c\u2500 .gitignore \u2514\u2500 README.md Configuration File \u00b6 Tile projects are configured via a single Python script called config.py . We use python even for configuration, over formats like yaml , as we cna make use of standard Python constructs to make the configuration more readable. The Tile configuration is a single Python object that describes the Tile Project, this is comprised from multiple containing objects that describes how each subsystem works. An example config.py is as below: from tile.package import Package package = Package ( entrypoint = \"app.py\" , data_dir = \"data/\" , autodiscover = True , databases = [ DuckDBConnector (), ], # package file configuration include = [ \"a.py\" , \"b/\" ], exclude = [], # scheduled tasks schedules = [ Task ( name = \"daily-report\" , cron = \"00 9 * * MON-FRI\" ), ], # notification configuration, e.g. Slack, Email. Teams notifications = [ Email ( smtp_config = \"\" ), Slack ( slack_api_key = \"\" ), ], env_vars = {}, # ELT workflows workflows = [ Workflow ( name = \"Load HR Info\" , cron = \"00 1 * * *\" , source = \"Workflow\" , on_load = \"transform-hr-info\" ) ] ) # package lifecycle hooks def first_run (): # code to run upon installing the package ... Project Development \u00b6 You can develop your Tile project using all of the included components - we provide Python-based interfaces and wrappers around all of them for easy use within your code. You can write all your your Data Application code and tasks using Datapane 's View framework - Tile will look for a Datapane Application within app.py and use it (Datapane also has great notebook support so will also look for notebooks called app.ipynb ). You can find more from the Datapane Application docs . Tile also builds upon several other components that you can use from your Python code, you can find their documentation on their specific pages, including DuckDB Meltano Connectors Luigi Tile projects can be developed locally or using remote development platforms such as GitHub Codespaces, in addition we support all Notebook environments, including JupyterLab, VSCode Notebooks, and more. Deployment \u00b6 Tile projects can be easily deployed to a Tile server, either directly from the project file, or via a CI-based mechanism such as GitHub Actions. We generally recommend the latter approach when building more robust systems however the former is useful when first getting started. Deployment is part of the Tile Project lifecycle covered in the next section .","title":"Tile Projects"},{"location":"dev/projects/#workflow","text":"The steps invovled in building a Tile project include, flowchart LR A(Configure) --> B(Develop) B --> C(Deploy) Configuring the Tile project Developing the Python application and workflow functions Deploying your Tile project","title":"Workflow"},{"location":"dev/projects/#configuration","text":"Tile opts for convention over configuration, and projects can be easily defined and follow sensible defaults. Tile projects are defined within a directory and are configured via two complementary methods, - The filesystem layout - the config.py Python-based Tile project configuration Each directory represents a tile project, that we recommend forms it's own git repository, and from there can be deployed to a Tile Server (see lifecycle ).","title":"Configuration"},{"location":"dev/projects/#directory-layout","text":"Tile projects follow a known filesystem layout, to make jumping between projects much simpler. The layout below describes that basic layout of a Tile Project, including the configuration and all python code and data used for the solution. my-tile-project/ \u2502 # tile configuration \u251c\u2500 config.py \u2502 # datapane server views and tasks \u251c\u2500 app.py | app.ipynb \u251c\u2500 tasks.py \u2502 # supporting python modules \u251c\u2500 a.py \u251c\u2500 b/ \u2502 \u2514\u2500 c.py \u2502 # persistent data within the /data dir \u251c\u2500 data/ \u2502 \u251c\u2500 model.pkl \u2502 \u2514\u2500 users.db \u2502 # python packages \u251c\u2500 requirements.txt \u251c\u2500 .gitignore \u2514\u2500 README.md","title":"Directory Layout"},{"location":"dev/projects/#configuration-file","text":"Tile projects are configured via a single Python script called config.py . We use python even for configuration, over formats like yaml , as we cna make use of standard Python constructs to make the configuration more readable. The Tile configuration is a single Python object that describes the Tile Project, this is comprised from multiple containing objects that describes how each subsystem works. An example config.py is as below: from tile.package import Package package = Package ( entrypoint = \"app.py\" , data_dir = \"data/\" , autodiscover = True , databases = [ DuckDBConnector (), ], # package file configuration include = [ \"a.py\" , \"b/\" ], exclude = [], # scheduled tasks schedules = [ Task ( name = \"daily-report\" , cron = \"00 9 * * MON-FRI\" ), ], # notification configuration, e.g. Slack, Email. Teams notifications = [ Email ( smtp_config = \"\" ), Slack ( slack_api_key = \"\" ), ], env_vars = {}, # ELT workflows workflows = [ Workflow ( name = \"Load HR Info\" , cron = \"00 1 * * *\" , source = \"Workflow\" , on_load = \"transform-hr-info\" ) ] ) # package lifecycle hooks def first_run (): # code to run upon installing the package ...","title":"Configuration File"},{"location":"dev/projects/#project-development","text":"You can develop your Tile project using all of the included components - we provide Python-based interfaces and wrappers around all of them for easy use within your code. You can write all your your Data Application code and tasks using Datapane 's View framework - Tile will look for a Datapane Application within app.py and use it (Datapane also has great notebook support so will also look for notebooks called app.ipynb ). You can find more from the Datapane Application docs . Tile also builds upon several other components that you can use from your Python code, you can find their documentation on their specific pages, including DuckDB Meltano Connectors Luigi Tile projects can be developed locally or using remote development platforms such as GitHub Codespaces, in addition we support all Notebook environments, including JupyterLab, VSCode Notebooks, and more.","title":"Project Development"},{"location":"dev/projects/#deployment","text":"Tile projects can be easily deployed to a Tile server, either directly from the project file, or via a CI-based mechanism such as GitHub Actions. We generally recommend the latter approach when building more robust systems however the former is useful when first getting started. Deployment is part of the Tile Project lifecycle covered in the next section .","title":"Deployment"},{"location":"dev/server/","text":"Tile Server \u00b6 A Tile Server is an server deployed that is capable of running Tile Projects. We provide Tile Server as an Open-Core product that you can freely install however has additional features for paying Enterprise customers. Tile is distributed as a VM (Virtual Machine), which you can easily install into your own private cloud or even bare metal. This allows you to have no worries about the safety of your data, nothing leaves your own environment, and fits with our Philosophy . By running everything on your own infrastructure, we can make use of advanced features like localized LLMs that use AI to analyze your data without leaving your network. For those users who don't want to worry about server maintenance, we also provide a hosted version of the Tile Server for users, this runs in a single tenant fashion in the same way as the on-prem version, however we ensure it's all running correctly and all up-to-date - freeing you from any infrastructure complexity. Management \u00b6 Tile Server is a versatile appliance OS designed for both cloud and bare metal installations - this means it takes care of keeping itself updated and requires minimal management, so you can focus on building your Data Projects. It provides a robust management interface for seamless administration within your organization, so that admins to easily configure and manage the server to best suit your environment. Key features include: User Management: Effortlessly create, edit, and manage user accounts, groups, and permissions, ensuring secure access to your data applications. SAML Integration: Streamline user authentication and authorization by integrating with your existing SAML-based identity provider, simplifying single sign-on (SSO) across your organization. System Monitoring: Keep an eye on your server's performance with real-time metrics, logs, and alerts, empowering you to proactively identify and resolve potential issues. Automated Backups: Schedule and manage backups of your data applications and configurations to ensure data integrity and minimize downtime during unexpected events. Version Control: Easily track and manage changes to your data applications using built-in version control, fostering collaboration and promoting best practices among your team. Resource Allocation: Efficiently manage system resources by setting quotas, limits, and priorities for individual users and groups, ensuring a smooth experience for all. Security and Compliance: Enforce security policies, manage encryption keys, and monitor compliance with regulatory standards to protect your organization's valuable data. Note Tile integrates well with existing cloud providers, however this is not required and it will also operate just as well on bare metal. Subscription \u00b6 As an Open Core product, Tile Server can be downloaded and used freely without cost. However several features are only for organizations with a valid subscription plan. As part of your subscription, you will receive a License Key that you can upload into your Tile Server to enable the full feature set.","title":"Tile Server"},{"location":"dev/server/#tile-server","text":"A Tile Server is an server deployed that is capable of running Tile Projects. We provide Tile Server as an Open-Core product that you can freely install however has additional features for paying Enterprise customers. Tile is distributed as a VM (Virtual Machine), which you can easily install into your own private cloud or even bare metal. This allows you to have no worries about the safety of your data, nothing leaves your own environment, and fits with our Philosophy . By running everything on your own infrastructure, we can make use of advanced features like localized LLMs that use AI to analyze your data without leaving your network. For those users who don't want to worry about server maintenance, we also provide a hosted version of the Tile Server for users, this runs in a single tenant fashion in the same way as the on-prem version, however we ensure it's all running correctly and all up-to-date - freeing you from any infrastructure complexity.","title":"Tile Server"},{"location":"dev/server/#management","text":"Tile Server is a versatile appliance OS designed for both cloud and bare metal installations - this means it takes care of keeping itself updated and requires minimal management, so you can focus on building your Data Projects. It provides a robust management interface for seamless administration within your organization, so that admins to easily configure and manage the server to best suit your environment. Key features include: User Management: Effortlessly create, edit, and manage user accounts, groups, and permissions, ensuring secure access to your data applications. SAML Integration: Streamline user authentication and authorization by integrating with your existing SAML-based identity provider, simplifying single sign-on (SSO) across your organization. System Monitoring: Keep an eye on your server's performance with real-time metrics, logs, and alerts, empowering you to proactively identify and resolve potential issues. Automated Backups: Schedule and manage backups of your data applications and configurations to ensure data integrity and minimize downtime during unexpected events. Version Control: Easily track and manage changes to your data applications using built-in version control, fostering collaboration and promoting best practices among your team. Resource Allocation: Efficiently manage system resources by setting quotas, limits, and priorities for individual users and groups, ensuring a smooth experience for all. Security and Compliance: Enforce security policies, manage encryption keys, and monitor compliance with regulatory standards to protect your organization's valuable data. Note Tile integrates well with existing cloud providers, however this is not required and it will also operate just as well on bare metal.","title":"Management"},{"location":"dev/server/#subscription","text":"As an Open Core product, Tile Server can be downloaded and used freely without cost. However several features are only for organizations with a valid subscription plan. As part of your subscription, you will receive a License Key that you can upload into your Tile Server to enable the full feature set.","title":"Subscription"},{"location":"old/","text":"","title":"Tile by Datapane - The SDK for creating data apps"},{"location":"old/about/comparisons/","text":"Hosted Jupyter Notebooks \u00b6 When data science teams want an end-to-end hosted environment for SQL and Python which enables collaboration and sharing, they may use a hosted Jupyter notebook. Tile is not a replacement for the analysis or R&D stage of your data science process and seeks to be a complement to these platforms. Instead, it is only focussed on the 'last mile'. This means that you can also use Tile inside any existing Python environment, such as Colab, Deepnote, Hex, or SageMaker. Realtime App Frameworks \u00b6 Frameworks such as Streamlit, Dash, and Gradio allow users to create realtime applications which you then deploy to the cloud. Advantages \u00b6 Highly interactive : reactive execution model better for highly-interactive use-cases (i.e. a live computer vision model) Disadvantages \u00b6 Not decoupled : You can only build realtime apps, not discrete reports (i.e. snapshots). This means that all sharing requires you [TODO: better explanation why this matters] Hard to migrate workloads: Incompatible with Jupyter Notebooks and existing code, whereas Datapane can take existing notebooks and scripts with minimal configuration Complex deployment and engineering: requires architecting and handling of complex apps principles No programmatic reporting: Doesn\u2019t solve the JTBD around programmatic reporting or reporting embedded in workflows","title":"Comparisons"},{"location":"old/about/comparisons/#hosted-jupyter-notebooks","text":"When data science teams want an end-to-end hosted environment for SQL and Python which enables collaboration and sharing, they may use a hosted Jupyter notebook. Tile is not a replacement for the analysis or R&D stage of your data science process and seeks to be a complement to these platforms. Instead, it is only focussed on the 'last mile'. This means that you can also use Tile inside any existing Python environment, such as Colab, Deepnote, Hex, or SageMaker.","title":"Hosted Jupyter Notebooks"},{"location":"old/about/comparisons/#realtime-app-frameworks","text":"Frameworks such as Streamlit, Dash, and Gradio allow users to create realtime applications which you then deploy to the cloud.","title":"Realtime App Frameworks"},{"location":"old/about/comparisons/#advantages","text":"Highly interactive : reactive execution model better for highly-interactive use-cases (i.e. a live computer vision model)","title":"Advantages"},{"location":"old/about/comparisons/#disadvantages","text":"Not decoupled : You can only build realtime apps, not discrete reports (i.e. snapshots). This means that all sharing requires you [TODO: better explanation why this matters] Hard to migrate workloads: Incompatible with Jupyter Notebooks and existing code, whereas Datapane can take existing notebooks and scripts with minimal configuration Complex deployment and engineering: requires architecting and handling of complex apps principles No programmatic reporting: Doesn\u2019t solve the JTBD around programmatic reporting or reporting embedded in workflows","title":"Disadvantages"},{"location":"old/about/faq/","text":"Is Tile production ready? \u00b6 Tile is a repackaging of what was previously Datapane's internal reporting library, which has served millions of reports to hundreds of thousands of people. Who builds Tile? \u00b6 Tile is an open-source community library which is open to contributions, but is most actively developed by the Datapane team. Is Tile free? \u00b6 Yes, Tile is free and will forever be free. When should I not use Tile? \u00b6 Realtime apps \u00b6 Tile's execution model is serverless and based on request-response. If you want realtime apps (where you drag a slider and see updates in realtime, without hitting a submit button), Tile isn't currently a great fit. In this case, we'd recommend something like Streamlit or Dash. Classic BI \u00b6 If you are just computing some simple KPIs on a data warehouse and not doing anything programmatic, you may be better served by SQL and your regular BI tool. No-code \u00b6 If you want non-technical people to build reports who want to use a drag-and-drop UI, Tile isn't the right fit.","title":"Faq"},{"location":"old/about/faq/#is-tile-production-ready","text":"Tile is a repackaging of what was previously Datapane's internal reporting library, which has served millions of reports to hundreds of thousands of people.","title":"Is Tile production ready?"},{"location":"old/about/faq/#who-builds-tile","text":"Tile is an open-source community library which is open to contributions, but is most actively developed by the Datapane team.","title":"Who builds Tile?"},{"location":"old/about/faq/#is-tile-free","text":"Yes, Tile is free and will forever be free.","title":"Is Tile free?"},{"location":"old/about/faq/#when-should-i-not-use-tile","text":"","title":"When should I not use Tile?"},{"location":"old/about/faq/#realtime-apps","text":"Tile's execution model is serverless and based on request-response. If you want realtime apps (where you drag a slider and see updates in realtime, without hitting a submit button), Tile isn't currently a great fit. In this case, we'd recommend something like Streamlit or Dash.","title":"Realtime apps"},{"location":"old/about/faq/#classic-bi","text":"If you are just computing some simple KPIs on a data warehouse and not doing anything programmatic, you may be better served by SQL and your regular BI tool.","title":"Classic BI"},{"location":"old/about/faq/#no-code","text":"If you want non-technical people to build reports who want to use a drag-and-drop UI, Tile isn't the right fit.","title":"No-code"},{"location":"old/about/mission/","text":"We believe the future of data analysis is open-source and developer-first: the best data teams will be software engineering teams. This is happening already. Open-source and code-first frameworks have revolutionized how we extract , load , and analyze data. But there is one part of the stack that has very little developer-first tooling: the front-end. Sharing things in a code-first way is too hard and takes too long. Data teams lack the tools and frameworks for creating apps which web developers enjoy. This means jumping back to legacy UI-first tools, which lack the benefits of code-first. We think it's time for a radical new way to build data apps which borrows from the best practices of the web frameworks like Rails and Django. We think should be just as easy to whip up an app, dashboard, or report in Python as it is to create it in a drag and drop tool. We believe there is an opportunity to totally redefine the way data-focussed applications. Tile's philosophy includes three guiding principles: Code-first \u00b6 Tile is unashamadely code-first, which means that you have all of the benefits of versioning, testing, and collaboration which are absent in UI-first tools. It also makes it simple to create reports programmatically. Integrate with everything \u00b6 Tile is built so you can generate and share reports from inside of wherever you already analyze data. You can immediately use tile inside of PySpark, Airflow, Jupyter, Colab, or Sagemaker. Tile also renders the libraries you already use, like Pandas, Plotly, and Altair. The goal of the project is to have maximum compatibility with the rest of the data science ecosystem. Serverless \u00b6 Not every interaction should require running a Python thread running in the cloud. Tile believes in a separation of the presentation layer and execution layer. Tile views are compiled into interactive static pages which you can share as HTML documents or host on static sites. When building an app, execution happens in a serverless fashion.","title":"Mission"},{"location":"old/about/mission/#code-first","text":"Tile is unashamadely code-first, which means that you have all of the benefits of versioning, testing, and collaboration which are absent in UI-first tools. It also makes it simple to create reports programmatically.","title":"Code-first"},{"location":"old/about/mission/#integrate-with-everything","text":"Tile is built so you can generate and share reports from inside of wherever you already analyze data. You can immediately use tile inside of PySpark, Airflow, Jupyter, Colab, or Sagemaker. Tile also renders the libraries you already use, like Pandas, Plotly, and Altair. The goal of the project is to have maximum compatibility with the rest of the data science ecosystem.","title":"Integrate with everything"},{"location":"old/about/mission/#serverless","text":"Not every interaction should require running a Python thread running in the cloud. Tile believes in a separation of the presentation layer and execution layer. Tile views are compiled into interactive static pages which you can share as HTML documents or host on static sites. When building an app, execution happens in a serverless fashion.","title":"Serverless"},{"location":"old/about/roadmap/","text":"This is where the roadmap will live.","title":"Roadmap"},{"location":"old/about/usecases/","text":"Instrumenting data pipelines \u00b6 When a discrepancy occurs in our data pipeline and you need to understand what has gone wrong, you can use Tile to create, persist, and share a report with your team. Client sharing \u00b6 When you want to impress potential or existing customers with interactive data products in order to increase revenue/retention, you can use Tile to create interactive reports which you can share with them. Programmatic reporting \u00b6 When you need to save time by automating report creation, you can use Tile to programmatically generate reports (instead of building them manually). Self-service apps \u00b6 When we want non-technical people to be able to run advanced analytics for themselves, we can build them an app using Tile. Ad-hoc internal reporting \u00b6 When you have completed an ad-hoc analysis and want to share your findings with someone non-technical, you can create them a report using Tile.","title":"Usecases"},{"location":"old/about/usecases/#instrumenting-data-pipelines","text":"When a discrepancy occurs in our data pipeline and you need to understand what has gone wrong, you can use Tile to create, persist, and share a report with your team.","title":"Instrumenting data pipelines"},{"location":"old/about/usecases/#client-sharing","text":"When you want to impress potential or existing customers with interactive data products in order to increase revenue/retention, you can use Tile to create interactive reports which you can share with them.","title":"Client sharing"},{"location":"old/about/usecases/#programmatic-reporting","text":"When you need to save time by automating report creation, you can use Tile to programmatically generate reports (instead of building them manually).","title":"Programmatic reporting"},{"location":"old/about/usecases/#self-service-apps","text":"When we want non-technical people to be able to run advanced analytics for themselves, we can build them an app using Tile.","title":"Self-service apps"},{"location":"old/about/usecases/#ad-hoc-internal-reporting","text":"When you have completed an ad-hoc analysis and want to share your findings with someone non-technical, you can create them a report using Tile.","title":"Ad-hoc internal reporting"},{"location":"old/about/what/","text":"Tile is an SDK and architecture for creating data-driven applications using Python. Tile aims to be the fastest and easiest way for data teams to share insights in a code-first way, with features such as: Static generation of 100% standalone HTML apps which don't require backends Serverless app-running with backend code execution through dynamic forms Plot and data components compatible with the majority of the Python data ecosystem (such as Pandas, Altair, Plotly) Built in client-side layout components, such as dropdowns, selects, grids Fully interactive datatables with exploration and export Integrates into existing Python environments, like Jupyter and Spark What can I build with Tile? \u00b6 Tile shuns the idea that any app interaction requires a running backend server. Instead, the front-end and the backend are decoupled, similar to how many web frameworks and static-site generators work. This is important because it means that you can create apps in various ways, depending on your use case: Need to share ad-hoc plots and data from inside of a notebook? Using Tile, you can prerender an HTML single-page application, which doesn't even require a running server (like an interactive PDF!) Want to build an automated dashboard which updates every five minutes? Add Tile to a GitHub Action or cron job to programmatically update your report on a cadence. Need your end users to enter parameters and generate results on-demand? Add forms to your report which execute your notebooks or scripts on the backend. Static reports \u00b6 Tile allows you to generate static HTML reports from your existing environment, such as Jupyter, Airflow, or Spark. They are fully standalone and do not require a running Python server for viewing. Instead, you can export them as HTML reports or upload them to web-based hosts. Views can contain components which wrap up the Python objects inside your analysis. Out of the box, you can add formats such as: Pandas DataFrames Plots from Python visualization libraries such as Bokeh, Altair, Plotly, and Folium Markdown and text General files, such as images, PDFs, JSON data, etc Tile also provides a rich selection of layout and interactive components, such as grids, dropdowns, selects, and a fully interactive DataTable. Views can replace creating a report in a BI tool, such as Looker or Tableau. import tile_dev as t import snowflake.connector from internal_lib import forecast conn = snowflake . connector . connect ( ... ) users = conn . execute_query ( 'get_users.sql' ) . fetchall () f_data , f_plot = forecast . predict ( df ) sales_v_profit = alt . Chart ( users ) . encode ( x = 'sales' , y = 'profit' , color = 'category' ) t . View ( t . Plot ( sales_v_profit , name = 'sale_v_profit' ), t . DataTable ( f_data , name = 'forecast_data' ), t . Plot ( f_plot , name = 'forecast_plot' ) ) . save ( path = 'report.html' ) Data apps \u00b6 Introduction \u00b6 Static reports are great to start with. They are portable, scalable, and fast to create. But eventually you might need your end-users to be able to run your Python script or Jupyter Notebook themselves. Expanding on the above example, we can add a dynamic form to our view which users can run with parameters. analysis.ipynb # API TBD - this is a mock! import tile_dev as t import snowflake.connector from internal_lib import forecast conn = snowflake . connector . connect ( ... ) users = conn . execute_query ( 'get_users.sql' ) . fetchall () sales_v_profit = alt . Chart ( users ) . encode ( x = 'sales' , y = 'profit' , color = 'category' ) t . View ( t . Plot ( sales_v_profit , name = 'sale_v_profit' ), t . Form ( id = 'forecast' , params = { 'days' : 'integer' , 'item' : 'string' }) t . DataTable ( f_data , name = 'forecast_data' ), t . Plot ( f_plot , name = 'forecast_plot' ) ) . Backend ( t . Function ( path = './forecast.py' , id = 'forecast' ) ) . run_app () forecast.py # API TBD - this is a mock! import tile as t from internal_lib import forecast days = t . Params ( 'days' ) item = t . Params ( 'items' ) f_data , f_plot = forecast . predict ( df , item , days ) t . View ( t . DataTable ( f_data , name = 'forecast_data' ), t . Plot ( f_plot , name = 'forecast_plot' ) ) What is Tile not? \u00b6 Tile is not a realtime reactive web framework like Streamlit or Dash Tile is not an analysis environment like Jupyter","title":"What"},{"location":"old/about/what/#what-can-i-build-with-tile","text":"Tile shuns the idea that any app interaction requires a running backend server. Instead, the front-end and the backend are decoupled, similar to how many web frameworks and static-site generators work. This is important because it means that you can create apps in various ways, depending on your use case: Need to share ad-hoc plots and data from inside of a notebook? Using Tile, you can prerender an HTML single-page application, which doesn't even require a running server (like an interactive PDF!) Want to build an automated dashboard which updates every five minutes? Add Tile to a GitHub Action or cron job to programmatically update your report on a cadence. Need your end users to enter parameters and generate results on-demand? Add forms to your report which execute your notebooks or scripts on the backend.","title":"What can I build with Tile?"},{"location":"old/about/what/#static-reports","text":"Tile allows you to generate static HTML reports from your existing environment, such as Jupyter, Airflow, or Spark. They are fully standalone and do not require a running Python server for viewing. Instead, you can export them as HTML reports or upload them to web-based hosts. Views can contain components which wrap up the Python objects inside your analysis. Out of the box, you can add formats such as: Pandas DataFrames Plots from Python visualization libraries such as Bokeh, Altair, Plotly, and Folium Markdown and text General files, such as images, PDFs, JSON data, etc Tile also provides a rich selection of layout and interactive components, such as grids, dropdowns, selects, and a fully interactive DataTable. Views can replace creating a report in a BI tool, such as Looker or Tableau. import tile_dev as t import snowflake.connector from internal_lib import forecast conn = snowflake . connector . connect ( ... ) users = conn . execute_query ( 'get_users.sql' ) . fetchall () f_data , f_plot = forecast . predict ( df ) sales_v_profit = alt . Chart ( users ) . encode ( x = 'sales' , y = 'profit' , color = 'category' ) t . View ( t . Plot ( sales_v_profit , name = 'sale_v_profit' ), t . DataTable ( f_data , name = 'forecast_data' ), t . Plot ( f_plot , name = 'forecast_plot' ) ) . save ( path = 'report.html' )","title":"Static reports"},{"location":"old/about/what/#data-apps","text":"","title":"Data apps"},{"location":"old/about/what/#introduction","text":"Static reports are great to start with. They are portable, scalable, and fast to create. But eventually you might need your end-users to be able to run your Python script or Jupyter Notebook themselves. Expanding on the above example, we can add a dynamic form to our view which users can run with parameters. analysis.ipynb # API TBD - this is a mock! import tile_dev as t import snowflake.connector from internal_lib import forecast conn = snowflake . connector . connect ( ... ) users = conn . execute_query ( 'get_users.sql' ) . fetchall () sales_v_profit = alt . Chart ( users ) . encode ( x = 'sales' , y = 'profit' , color = 'category' ) t . View ( t . Plot ( sales_v_profit , name = 'sale_v_profit' ), t . Form ( id = 'forecast' , params = { 'days' : 'integer' , 'item' : 'string' }) t . DataTable ( f_data , name = 'forecast_data' ), t . Plot ( f_plot , name = 'forecast_plot' ) ) . Backend ( t . Function ( path = './forecast.py' , id = 'forecast' ) ) . run_app () forecast.py # API TBD - this is a mock! import tile as t from internal_lib import forecast days = t . Params ( 'days' ) item = t . Params ( 'items' ) f_data , f_plot = forecast . predict ( df , item , days ) t . View ( t . DataTable ( f_data , name = 'forecast_data' ), t . Plot ( f_plot , name = 'forecast_plot' ) )","title":"Introduction"},{"location":"old/about/what/#what-is-tile-not","text":"Tile is not a realtime reactive web framework like Streamlit or Dash Tile is not an analysis environment like Jupyter","title":"What is Tile not?"}]}