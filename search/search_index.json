{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lorem ipsum \u00b6 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Introduction \u00b6 (aka What is Tile?) Why use it \u00b6 Benefits \u00b6 Community \u00b6 GitHub \u00b6 Our centre of gravity is our GitHub where we build in the open. Come and get involved! Forums \u00b6 We host the Data Developer forum for all things to do with building data apps and frontends. Come and say hi! Twitter \u00b6 For updates, make sure to follow the Tile project on Twitter.","title":"Home"},{"location":"#lorem-ipsum","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"Lorem ipsum"},{"location":"#introduction","text":"(aka What is Tile?)","title":"Introduction"},{"location":"#why-use-it","text":"","title":"Why use it"},{"location":"#benefits","text":"","title":"Benefits"},{"location":"#community","text":"","title":"Community"},{"location":"#github","text":"Our centre of gravity is our GitHub where we build in the open. Come and get involved!","title":"GitHub"},{"location":"#forums","text":"We host the Data Developer forum for all things to do with building data apps and frontends. Come and say hi!","title":"Forums"},{"location":"#twitter","text":"For updates, make sure to follow the Tile project on Twitter.","title":"Twitter"},{"location":"architecture/","text":"Tile is architected to provide all the features you need to build robust and production-ready Data Projects, essentially a Data SDK in a box . Tile is built from multiple components that have been selected to work well together - we build on top of great open-source tools in the Python ecosystem, connecting them together and providing a integrated way to make use of them all. Tile Project Architecture Components \u00b6 Tile is split up into multiple sections comprised of several components - below we'll list a few of them and how they help you build Data Products. Analytics Code \u00b6 Tile uses the Datapane Python library to provide support for building Application Servers, Reports, and Dashboards that make up your project. You can use Datapane with many popular Python data science libraries, such as Pandas, Altair, Matplotlib,and more, and it works direct from Jupyter. Reportings and Dashboarding \u00b6 Datapane provides data reporting and dashboard functionality, which allows users to create visually engaging reports and interactive dashboards. This helps you communicate insights effectively and enables stakeholders to make data-driven decisions. By providing clear visualizations and a user-friendly interface, developers can easily share their findings and monitor key performance indicators within their applications. Datapane Components \u00b6 Datapane provides a suite of Python-based components and functions designed to perform live data analysis. Create and reuse components that allow you to process and analyze data in real-time, enabling them to uncover insights and make data-driven decisions quickly. By providing a Python-centric approach, your code can benefit from the language's extensive libraries and familiar syntax while building responsive, high-performance data-driven applications. Datapane Tasks \u00b6 Our open-source Python project includes features for managing background and scheduled tasks, which automate updates of datasets and the execution of analytics code. These capabilities allow developers to set up routine data refreshes and run analysis tasks without manual intervention, ensuring timely insights and efficient resource usage. By automating these processes, users can concentrate on exploring data and developing valuable applications, while the system effectively handles the underlying tasks. App Databases \u00b6 Your Data Products may need to store application-specific data that is independent of your analytics data, such as user preferences, for instance. To support this, Tile provides multiple persistance options for your Data Applications, including Document Databases )like Mongo DB), persistent caches, and Blob Storage (such as S3). These can be updated automatically, or as part of scheduled tasks, for instance to update a trained model out-of-band for use within a Data Product. ELT \u00b6 Our ELT functionality empowers users to efficiently extract data from a wide array of sources, including databases, APIs, and file formats, ensuring seamless integration with virtually any data source. Once the data is extracted, it is loaded the projects OLAP DBfor further transformation, allowing for tailored manipulation and analysis. By simplifying and automating the data ingestion process, Tile saves valuable time and resources, enabling developers and data scientists to focus on building applications and uncovering insights from their data. Orchestration \u00b6 Easily build, run, and orchestrate data pipelines - allowing you to efficiently manage, schedule, and monitor multiple data processing tasks, ensuring that dependencies are met and errors are handled gracefully. By automating and centralizing pipeline management, Tile projects eliminates manual intervention, reduces operational overhead, and accelerates your path to insights. Transformations \u00b6 Leverage the versatility of SQL and Python data transformations in our open-source Python project, enabling users to harness the power of familiar query languages and scripting. This feature allows for seamless manipulation and cleaning of data, catering to a wide range of analytical requirements. Benefit from the flexibility of both SQL and Python, and supercharge your data-driven applications with efficient, adaptable data transformations. Connections \u00b6 Experience seamless data connections with our open-source Python project, offering built-in support for Singer Taps and Meltano integrations. Effortlessly connect to numerous data sources and enjoy streamlined data extraction, ensuring compatibility and adaptability for your data-driven applications. Capitalize on the convenience of reliable data connections and elevate your data workflows with our versatile integration options. OLAP Database \u00b6 We use DuckDB as our OLAP (Online Analytical Processing) databases for Tile to enhance your data analysis capabilities. DuckDB provides efficient, multidimensional data analysis, making it easier to explore and manipulate large datasets in real-time. By integrating DuckDB, you can easily use both SQL and Python to rapidly work with large datasets, transform them and persist them trivially within your applications. Input / Output \u00b6 Notifications \u00b6 Tile offers support for popular communication channels like Slack, Teams, and Email. Use notifications to help users stay informed about the progress and status of their data-driven applications, as well as send timely alerts for critical events or errors. By integrating these notification options, developers can ensure effective communication, improved collaboration, and prompt issue resolution within their teams. Integrations \u00b6 Tile comes with integrations built-in to work with external products, such as SaaS APIs, via webhooks. Python tasks can be scheduled to run in the background to perform batch processing. We also provide integrations into multiple LLMs via LangChain enabling the automated analysis of data. Management \u00b6 User Management \u00b6 Tile comes with user management out of the box, so you can efficiently handle permissions, Role-Based Access Control (RBAC), and SAML-based single sign-on. This functionality allows you to define and manage access levels for different users, ensuring data security and compliance within your application. By providing granular control over user access, developers can build Data Projects effectively while safeguarding sensitive information and maintaining a secure environment. Admin \u00b6 Tile provide essential tools for logging, monitoring, deployment, and versioning. These capabilities enable developers to maintain robust applications by tracking system activity, monitoring performance, managing deployments, and handling version control. By offering comprehensive administrative support, Tile ensures that users can effectively manage their applications, optimize performance, and maintain a transparent development process.","title":"Architecture"},{"location":"architecture/#components","text":"Tile is split up into multiple sections comprised of several components - below we'll list a few of them and how they help you build Data Products.","title":"Components"},{"location":"architecture/#analytics-code","text":"Tile uses the Datapane Python library to provide support for building Application Servers, Reports, and Dashboards that make up your project. You can use Datapane with many popular Python data science libraries, such as Pandas, Altair, Matplotlib,and more, and it works direct from Jupyter.","title":"Analytics Code"},{"location":"architecture/#reportings-and-dashboarding","text":"Datapane provides data reporting and dashboard functionality, which allows users to create visually engaging reports and interactive dashboards. This helps you communicate insights effectively and enables stakeholders to make data-driven decisions. By providing clear visualizations and a user-friendly interface, developers can easily share their findings and monitor key performance indicators within their applications.","title":"Reportings and Dashboarding"},{"location":"architecture/#datapane-components","text":"Datapane provides a suite of Python-based components and functions designed to perform live data analysis. Create and reuse components that allow you to process and analyze data in real-time, enabling them to uncover insights and make data-driven decisions quickly. By providing a Python-centric approach, your code can benefit from the language's extensive libraries and familiar syntax while building responsive, high-performance data-driven applications.","title":"Datapane Components"},{"location":"architecture/#datapane-tasks","text":"Our open-source Python project includes features for managing background and scheduled tasks, which automate updates of datasets and the execution of analytics code. These capabilities allow developers to set up routine data refreshes and run analysis tasks without manual intervention, ensuring timely insights and efficient resource usage. By automating these processes, users can concentrate on exploring data and developing valuable applications, while the system effectively handles the underlying tasks.","title":"Datapane Tasks"},{"location":"architecture/#app-databases","text":"Your Data Products may need to store application-specific data that is independent of your analytics data, such as user preferences, for instance. To support this, Tile provides multiple persistance options for your Data Applications, including Document Databases )like Mongo DB), persistent caches, and Blob Storage (such as S3). These can be updated automatically, or as part of scheduled tasks, for instance to update a trained model out-of-band for use within a Data Product.","title":"App Databases"},{"location":"architecture/#elt","text":"Our ELT functionality empowers users to efficiently extract data from a wide array of sources, including databases, APIs, and file formats, ensuring seamless integration with virtually any data source. Once the data is extracted, it is loaded the projects OLAP DBfor further transformation, allowing for tailored manipulation and analysis. By simplifying and automating the data ingestion process, Tile saves valuable time and resources, enabling developers and data scientists to focus on building applications and uncovering insights from their data.","title":"ELT"},{"location":"architecture/#orchestration","text":"Easily build, run, and orchestrate data pipelines - allowing you to efficiently manage, schedule, and monitor multiple data processing tasks, ensuring that dependencies are met and errors are handled gracefully. By automating and centralizing pipeline management, Tile projects eliminates manual intervention, reduces operational overhead, and accelerates your path to insights.","title":"Orchestration"},{"location":"architecture/#transformations","text":"Leverage the versatility of SQL and Python data transformations in our open-source Python project, enabling users to harness the power of familiar query languages and scripting. This feature allows for seamless manipulation and cleaning of data, catering to a wide range of analytical requirements. Benefit from the flexibility of both SQL and Python, and supercharge your data-driven applications with efficient, adaptable data transformations.","title":"Transformations"},{"location":"architecture/#connections","text":"Experience seamless data connections with our open-source Python project, offering built-in support for Singer Taps and Meltano integrations. Effortlessly connect to numerous data sources and enjoy streamlined data extraction, ensuring compatibility and adaptability for your data-driven applications. Capitalize on the convenience of reliable data connections and elevate your data workflows with our versatile integration options.","title":"Connections"},{"location":"architecture/#olap-database","text":"We use DuckDB as our OLAP (Online Analytical Processing) databases for Tile to enhance your data analysis capabilities. DuckDB provides efficient, multidimensional data analysis, making it easier to explore and manipulate large datasets in real-time. By integrating DuckDB, you can easily use both SQL and Python to rapidly work with large datasets, transform them and persist them trivially within your applications.","title":"OLAP Database"},{"location":"architecture/#input-output","text":"","title":"Input / Output"},{"location":"architecture/#notifications","text":"Tile offers support for popular communication channels like Slack, Teams, and Email. Use notifications to help users stay informed about the progress and status of their data-driven applications, as well as send timely alerts for critical events or errors. By integrating these notification options, developers can ensure effective communication, improved collaboration, and prompt issue resolution within their teams.","title":"Notifications"},{"location":"architecture/#integrations","text":"Tile comes with integrations built-in to work with external products, such as SaaS APIs, via webhooks. Python tasks can be scheduled to run in the background to perform batch processing. We also provide integrations into multiple LLMs via LangChain enabling the automated analysis of data.","title":"Integrations"},{"location":"architecture/#management","text":"","title":"Management"},{"location":"architecture/#user-management","text":"Tile comes with user management out of the box, so you can efficiently handle permissions, Role-Based Access Control (RBAC), and SAML-based single sign-on. This functionality allows you to define and manage access levels for different users, ensuring data security and compliance within your application. By providing granular control over user access, developers can build Data Projects effectively while safeguarding sensitive information and maintaining a secure environment.","title":"User Management"},{"location":"architecture/#admin","text":"Tile provide essential tools for logging, monitoring, deployment, and versioning. These capabilities enable developers to maintain robust applications by tracking system activity, monitoring performance, managing deployments, and handling version control. By offering comprehensive administrative support, Tile ensures that users can effectively manage their applications, optimize performance, and maintain a transparent development process.","title":"Admin"},{"location":"lorem/","text":"Lorem ipsum \u00b6 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"Deployment"},{"location":"lorem/#lorem-ipsum","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"Lorem ipsum"},{"location":"old_index/","text":"","title":"OLD-Home"},{"location":"dev/overview/","text":"Test","title":"Overview"},{"location":"old_about/comparisons/","text":"Hosted Jupyter Notebooks \u00b6 When data science teams want an end-to-end hosted environment for SQL and Python which enables collaboration and sharing, they may use a hosted Jupyter notebook. Tile is not a replacement for the analysis or R&D stage of your data science process and seeks to be a complement to these platforms. Instead, it is only focussed on the 'last mile'. This means that you can also use Tile inside any existing Python environment, such as Colab, Deepnote, Hex, or SageMaker. Realtime App Frameworks \u00b6 Frameworks such as Streamlit, Dash, and Gradio allow users to create realtime applications which you then deploy to the cloud. Advantages \u00b6 Highly interactive : reactive execution model better for highly-interactive use-cases (i.e. a live computer vision model) Disadvantages \u00b6 Not decoupled : You can only build realtime apps, not discrete reports (i.e. snapshots). This means that all sharing requires you [TODO: better explanation why this matters] Hard to migrate workloads: Incompatible with Jupyter Notebooks and existing code, whereas Datapane can take existing notebooks and scripts with minimal configuration Complex deployment and engineering: requires architecting and handling of complex apps principles No programmatic reporting: Doesn\u2019t solve the JTBD around programmatic reporting or reporting embedded in workflows","title":"Comparisons"},{"location":"old_about/comparisons/#hosted-jupyter-notebooks","text":"When data science teams want an end-to-end hosted environment for SQL and Python which enables collaboration and sharing, they may use a hosted Jupyter notebook. Tile is not a replacement for the analysis or R&D stage of your data science process and seeks to be a complement to these platforms. Instead, it is only focussed on the 'last mile'. This means that you can also use Tile inside any existing Python environment, such as Colab, Deepnote, Hex, or SageMaker.","title":"Hosted Jupyter Notebooks"},{"location":"old_about/comparisons/#realtime-app-frameworks","text":"Frameworks such as Streamlit, Dash, and Gradio allow users to create realtime applications which you then deploy to the cloud.","title":"Realtime App Frameworks"},{"location":"old_about/comparisons/#advantages","text":"Highly interactive : reactive execution model better for highly-interactive use-cases (i.e. a live computer vision model)","title":"Advantages"},{"location":"old_about/comparisons/#disadvantages","text":"Not decoupled : You can only build realtime apps, not discrete reports (i.e. snapshots). This means that all sharing requires you [TODO: better explanation why this matters] Hard to migrate workloads: Incompatible with Jupyter Notebooks and existing code, whereas Datapane can take existing notebooks and scripts with minimal configuration Complex deployment and engineering: requires architecting and handling of complex apps principles No programmatic reporting: Doesn\u2019t solve the JTBD around programmatic reporting or reporting embedded in workflows","title":"Disadvantages"},{"location":"old_about/faq/","text":"Is Tile production ready? \u00b6 Tile is a repackaging of what was previously Datapane's internal reporting library, which has served millions of reports to hundreds of thousands of people. Who builds Tile? \u00b6 Tile is an open-source community library which is open to contributions, but is most actively developed by the Datapane team. Is Tile free? \u00b6 Yes, Tile is free and will forever be free. When should I not use Tile? \u00b6 Realtime apps \u00b6 Tile's execution model is serverless and based on request-response. If you want realtime apps (where you drag a slider and see updates in realtime, without hitting a submit button), Tile isn't currently a great fit. In this case, we'd recommend something like Streamlit or Dash. Classic BI \u00b6 If you are just computing some simple KPIs on a data warehouse and not doing anything programmatic, you may be better served by SQL and your regular BI tool. No-code \u00b6 If you want non-technical people to build reports who want to use a drag-and-drop UI, Tile isn't the right fit.","title":"FAQ"},{"location":"old_about/faq/#is-tile-production-ready","text":"Tile is a repackaging of what was previously Datapane's internal reporting library, which has served millions of reports to hundreds of thousands of people.","title":"Is Tile production ready?"},{"location":"old_about/faq/#who-builds-tile","text":"Tile is an open-source community library which is open to contributions, but is most actively developed by the Datapane team.","title":"Who builds Tile?"},{"location":"old_about/faq/#is-tile-free","text":"Yes, Tile is free and will forever be free.","title":"Is Tile free?"},{"location":"old_about/faq/#when-should-i-not-use-tile","text":"","title":"When should I not use Tile?"},{"location":"old_about/faq/#realtime-apps","text":"Tile's execution model is serverless and based on request-response. If you want realtime apps (where you drag a slider and see updates in realtime, without hitting a submit button), Tile isn't currently a great fit. In this case, we'd recommend something like Streamlit or Dash.","title":"Realtime apps"},{"location":"old_about/faq/#classic-bi","text":"If you are just computing some simple KPIs on a data warehouse and not doing anything programmatic, you may be better served by SQL and your regular BI tool.","title":"Classic BI"},{"location":"old_about/faq/#no-code","text":"If you want non-technical people to build reports who want to use a drag-and-drop UI, Tile isn't the right fit.","title":"No-code"},{"location":"old_about/mission/","text":"We believe the future of data analysis is open-source and developer-first: the best data teams will be software engineering teams. This is happening already. Open-source and code-first frameworks have revolutionized how we extract , load , and analyze data. But there is one part of the stack that has very little developer-first tooling: the front-end. Sharing things in a code-first way is too hard and takes too long. Data teams lack the tools and frameworks for creating apps which web developers enjoy. This means jumping back to legacy UI-first tools, which lack the benefits of code-first. We think it's time for a radical new way to build data apps which borrows from the best practices of the web frameworks like Rails and Django. We think should be just as easy to whip up an app, dashboard, or report in Python as it is to create it in a drag and drop tool. We believe there is an opportunity to totally redefine the way data-focussed applications. Tile's philosophy includes three guiding principles: Code-first \u00b6 Tile is unashamadely code-first, which means that you have all of the benefits of versioning, testing, and collaboration which are absent in UI-first tools. It also makes it simple to create reports programmatically. Integrate with everything \u00b6 Tile is built so you can generate and share reports from inside of wherever you already analyze data. You can immediately use tile inside of PySpark, Airflow, Jupyter, Colab, or Sagemaker. Tile also renders the libraries you already use, like Pandas, Plotly, and Altair. The goal of the project is to have maximum compatibility with the rest of the data science ecosystem. Serverless \u00b6 Not every interaction should require running a Python thread running in the cloud. Tile believes in a separation of the presentation layer and execution layer. Tile views are compiled into interactive static pages which you can share as HTML documents or host on static sites. When building an app, execution happens in a serverless fashion.","title":"Mission"},{"location":"old_about/mission/#code-first","text":"Tile is unashamadely code-first, which means that you have all of the benefits of versioning, testing, and collaboration which are absent in UI-first tools. It also makes it simple to create reports programmatically.","title":"Code-first"},{"location":"old_about/mission/#integrate-with-everything","text":"Tile is built so you can generate and share reports from inside of wherever you already analyze data. You can immediately use tile inside of PySpark, Airflow, Jupyter, Colab, or Sagemaker. Tile also renders the libraries you already use, like Pandas, Plotly, and Altair. The goal of the project is to have maximum compatibility with the rest of the data science ecosystem.","title":"Integrate with everything"},{"location":"old_about/mission/#serverless","text":"Not every interaction should require running a Python thread running in the cloud. Tile believes in a separation of the presentation layer and execution layer. Tile views are compiled into interactive static pages which you can share as HTML documents or host on static sites. When building an app, execution happens in a serverless fashion.","title":"Serverless"},{"location":"old_about/roadmap/","text":"This is where the roadmap will live.","title":"Roadmap"},{"location":"old_about/usecases/","text":"Instrumenting data pipelines \u00b6 When a discrepancy occurs in our data pipeline and you need to understand what has gone wrong, you can use Tile to create, persist, and share a report with your team. Client sharing \u00b6 When you want to impress potential or existing customers with interactive data products in order to increase revenue/retention, you can use Tile to create interactive reports which you can share with them. Programmatic reporting \u00b6 When you need to save time by automating report creation, you can use Tile to programmatically generate reports (instead of building them manually). Self-service apps \u00b6 When we want non-technical people to be able to run advanced analytics for themselves, we can build them an app using Tile. Ad-hoc internal reporting \u00b6 When you have completed an ad-hoc analysis and want to share your findings with someone non-technical, you can create them a report using Tile.","title":"Use-cases"},{"location":"old_about/usecases/#instrumenting-data-pipelines","text":"When a discrepancy occurs in our data pipeline and you need to understand what has gone wrong, you can use Tile to create, persist, and share a report with your team.","title":"Instrumenting data pipelines"},{"location":"old_about/usecases/#client-sharing","text":"When you want to impress potential or existing customers with interactive data products in order to increase revenue/retention, you can use Tile to create interactive reports which you can share with them.","title":"Client sharing"},{"location":"old_about/usecases/#programmatic-reporting","text":"When you need to save time by automating report creation, you can use Tile to programmatically generate reports (instead of building them manually).","title":"Programmatic reporting"},{"location":"old_about/usecases/#self-service-apps","text":"When we want non-technical people to be able to run advanced analytics for themselves, we can build them an app using Tile.","title":"Self-service apps"},{"location":"old_about/usecases/#ad-hoc-internal-reporting","text":"When you have completed an ad-hoc analysis and want to share your findings with someone non-technical, you can create them a report using Tile.","title":"Ad-hoc internal reporting"},{"location":"old_about/what/","text":"Tile is an SDK and architecture for creating data-driven applications using Python. Tile aims to be the fastest and easiest way for data teams to share insights in a code-first way, with features such as: Static generation of 100% standalone HTML apps which don't require backends Serverless app-running with backend code execution through dynamic forms Plot and data components compatible with the majority of the Python data ecosystem (such as Pandas, Altair, Plotly) Built in client-side layout components, such as dropdowns, selects, grids Fully interactive datatables with exploration and export Integrates into existing Python environments, like Jupyter and Spark What can I build with Tile? \u00b6 Tile shuns the idea that any app interaction requires a running backend server. Instead, the front-end and the backend are decoupled, similar to how many web frameworks and static-site generators work. This is important because it means that you can create apps in various ways, depending on your use case: Need to share ad-hoc plots and data from inside of a notebook? Using Tile, you can prerender an HTML single-page application, which doesn't even require a running server (like an interactive PDF!) Want to build an automated dashboard which updates every five minutes? Add Tile to a GitHub Action or cron job to programmatically update your report on a cadence. Need your end users to enter parameters and generate results on-demand? Add forms to your report which execute your notebooks or scripts on the backend. Static reports \u00b6 Tile allows you to generate static HTML reports from your existing environment, such as Jupyter, Airflow, or Spark. They are fully standalone and do not require a running Python server for viewing. Instead, you can export them as HTML reports or upload them to web-based hosts. Views can contain components which wrap up the Python objects inside your analysis. Out of the box, you can add formats such as: Pandas DataFrames Plots from Python visualization libraries such as Bokeh, Altair, Plotly, and Folium Markdown and text General files, such as images, PDFs, JSON data, etc Tile also provides a rich selection of layout and interactive components, such as grids, dropdowns, selects, and a fully interactive DataTable. Views can replace creating a report in a BI tool, such as Looker or Tableau. import tile_dev as t import snowflake.connector from internal_lib import forecast conn = snowflake . connector . connect ( ... ) users = conn . execute_query ( 'get_users.sql' ) . fetchall () f_data , f_plot = forecast . predict ( df ) sales_v_profit = alt . Chart ( users ) . encode ( x = 'sales' , y = 'profit' , color = 'category' ) t . View ( t . Plot ( sales_v_profit , name = 'sale_v_profit' ), t . DataTable ( f_data , name = 'forecast_data' ), t . Plot ( f_plot , name = 'forecast_plot' ) ) . save ( path = 'report.html' ) Data apps \u00b6 Introduction \u00b6 Static reports are great to start with. They are portable, scalable, and fast to create. But eventually you might need your end-users to be able to run your Python script or Jupyter Notebook themselves. Expanding on the above example, we can add a dynamic form to our view which users can run with parameters. analysis.ipynb # API TBD - this is a mock! import tile_dev as t import snowflake.connector from internal_lib import forecast conn = snowflake . connector . connect ( ... ) users = conn . execute_query ( 'get_users.sql' ) . fetchall () sales_v_profit = alt . Chart ( users ) . encode ( x = 'sales' , y = 'profit' , color = 'category' ) t . View ( t . Plot ( sales_v_profit , name = 'sale_v_profit' ), t . Form ( id = 'forecast' , params = { 'days' : 'integer' , 'item' : 'string' }) t . DataTable ( f_data , name = 'forecast_data' ), t . Plot ( f_plot , name = 'forecast_plot' ) ) . Backend ( t . Function ( path = './forecast.py' , id = 'forecast' ) ) . run_app () forecast.py # API TBD - this is a mock! import tile as t from internal_lib import forecast days = t . Params ( 'days' ) item = t . Params ( 'items' ) f_data , f_plot = forecast . predict ( df , item , days ) t . View ( t . DataTable ( f_data , name = 'forecast_data' ), t . Plot ( f_plot , name = 'forecast_plot' ) ) What is Tile not? \u00b6 Tile is not a realtime reactive web framework like Streamlit or Dash Tile is not an analysis environment like Jupyter","title":"What is Tile?"},{"location":"old_about/what/#what-can-i-build-with-tile","text":"Tile shuns the idea that any app interaction requires a running backend server. Instead, the front-end and the backend are decoupled, similar to how many web frameworks and static-site generators work. This is important because it means that you can create apps in various ways, depending on your use case: Need to share ad-hoc plots and data from inside of a notebook? Using Tile, you can prerender an HTML single-page application, which doesn't even require a running server (like an interactive PDF!) Want to build an automated dashboard which updates every five minutes? Add Tile to a GitHub Action or cron job to programmatically update your report on a cadence. Need your end users to enter parameters and generate results on-demand? Add forms to your report which execute your notebooks or scripts on the backend.","title":"What can I build with Tile?"},{"location":"old_about/what/#static-reports","text":"Tile allows you to generate static HTML reports from your existing environment, such as Jupyter, Airflow, or Spark. They are fully standalone and do not require a running Python server for viewing. Instead, you can export them as HTML reports or upload them to web-based hosts. Views can contain components which wrap up the Python objects inside your analysis. Out of the box, you can add formats such as: Pandas DataFrames Plots from Python visualization libraries such as Bokeh, Altair, Plotly, and Folium Markdown and text General files, such as images, PDFs, JSON data, etc Tile also provides a rich selection of layout and interactive components, such as grids, dropdowns, selects, and a fully interactive DataTable. Views can replace creating a report in a BI tool, such as Looker or Tableau. import tile_dev as t import snowflake.connector from internal_lib import forecast conn = snowflake . connector . connect ( ... ) users = conn . execute_query ( 'get_users.sql' ) . fetchall () f_data , f_plot = forecast . predict ( df ) sales_v_profit = alt . Chart ( users ) . encode ( x = 'sales' , y = 'profit' , color = 'category' ) t . View ( t . Plot ( sales_v_profit , name = 'sale_v_profit' ), t . DataTable ( f_data , name = 'forecast_data' ), t . Plot ( f_plot , name = 'forecast_plot' ) ) . save ( path = 'report.html' )","title":"Static reports"},{"location":"old_about/what/#data-apps","text":"","title":"Data apps"},{"location":"old_about/what/#introduction","text":"Static reports are great to start with. They are portable, scalable, and fast to create. But eventually you might need your end-users to be able to run your Python script or Jupyter Notebook themselves. Expanding on the above example, we can add a dynamic form to our view which users can run with parameters. analysis.ipynb # API TBD - this is a mock! import tile_dev as t import snowflake.connector from internal_lib import forecast conn = snowflake . connector . connect ( ... ) users = conn . execute_query ( 'get_users.sql' ) . fetchall () sales_v_profit = alt . Chart ( users ) . encode ( x = 'sales' , y = 'profit' , color = 'category' ) t . View ( t . Plot ( sales_v_profit , name = 'sale_v_profit' ), t . Form ( id = 'forecast' , params = { 'days' : 'integer' , 'item' : 'string' }) t . DataTable ( f_data , name = 'forecast_data' ), t . Plot ( f_plot , name = 'forecast_plot' ) ) . Backend ( t . Function ( path = './forecast.py' , id = 'forecast' ) ) . run_app () forecast.py # API TBD - this is a mock! import tile as t from internal_lib import forecast days = t . Params ( 'days' ) item = t . Params ( 'items' ) f_data , f_plot = forecast . predict ( df , item , days ) t . View ( t . DataTable ( f_data , name = 'forecast_data' ), t . Plot ( f_plot , name = 'forecast_plot' ) )","title":"Introduction"},{"location":"old_about/what/#what-is-tile-not","text":"Tile is not a realtime reactive web framework like Streamlit or Dash Tile is not an analysis environment like Jupyter","title":"What is Tile not?"}]}