{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lorem ipsum \u00b6 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"Home"},{"location":"#lorem-ipsum","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"Lorem ipsum"},{"location":"community/","text":"GitHub \u00b6 Our centre of gravity is our GitHub where we build in the open. Come and get involved! Forums \u00b6 We host the Data Developer forum for all things to do with building data apps and frontends. Come and say hi! Twitter \u00b6 For updates, make sure to follow the Tile project on Twitter.","title":"Community"},{"location":"community/#github","text":"Our centre of gravity is our GitHub where we build in the open. Come and get involved!","title":"GitHub"},{"location":"community/#forums","text":"We host the Data Developer forum for all things to do with building data apps and frontends. Come and say hi!","title":"Forums"},{"location":"community/#twitter","text":"For updates, make sure to follow the Tile project on Twitter.","title":"Twitter"},{"location":"old_index/","text":"","title":"OLD-Home"},{"location":"api/getting-started/","text":"Getting Started \u00b6 Installation \u00b6 Tile is powered by the Datapane library, so you'll need to install this first. Datapane's Python library and CLI can be installed using either conda or pip on macOS, Windows, or Linux. Datapane supports Python 3.6 - 3.9 . Installing Instructions for installing Python can be found at https://wiki.python.org/moin/BeginnersGuide/Download . conda \u00b6 If you use conda , you can install it with: Python Jupyter $ conda install -c conda-forge \"datapane>=0.10.0\" $ datapane hello-world !conda install -c conda-forge \"datapane>=0.10.0\" !datapane hello-world Installing Conda sometimes installs an older version of datapane. If you receive errors, please check the version and try running conda update --all or try in a new conda environment ( conda create -n ENV and conda activate ENV) pip \u00b6 If you use pip , you can install it with: Python Jupyter $ pip3 install -U datapane $ datapane hello-world !pip3 install -U datapane !datapane hello-world Upgrading \u00b6 We upgrade datapane regularly to include new features, both in the client and on the hosted version. From time to time your client may no longer be compatible with the datapane server when uploading a report. If this happens, you will receive an error like the following: IncompatibleVersionError: Your client is out-of-date (version 0.9.2) and may be causing errors, \" please upgrade to version 0.10.2 In such an event, please upgrade your datapane cli via pip or conda and try again. Upgrading via pip If you installed datapane via pip, run the following command: $ pip install -U datapane Upgrading via conda If you installed datapane via conda, run the following command, adding the --all flag if needed. As above, if you receive errors please try using a fresh conda environment. $ conda update datapane OR conda update --all Windows Tips and Troubleshooting \u00b6 We generally recommend installing via conda over pip on Windows as it's easier to install all the required dependencies. If you need to install Python first, the latest versions of Windows 10 can install Python for you automatically - running python from the command-prompt will take you to the Windows Store where you can download an official version . We also strongly recommend using a 64-bit rather than the 32-bit version of Python, you can check this by running the command python -c \"import struct; print(struct.calcsize('P')*8, 'bit')\" from the Command Prompt. $ python -c \"import struct; print(struct.calcsize('P')*8, 'bit')\" Also note that on Windows, you can run the datapane command either by running datapane or datapane.exe on the command-line. Some specific issues you may encounter on Windows include: Import errors when running/importing datapane \u00b6 You may encounter errors such as ImportError: DLL load failed when running datapane or importing it within your Python code. If so, try installing the Visual C++ Redistributables for Windows from Microsoft and running again (you most likely want to download the version for x64, i.e. vc_redist.x64.exe ) Datapane install errors trying to compile pyarrow using Visual C++ \u00b6 This usually occurs when you are running a 32-bit version of Python and installing via pip . Either try using conda or install a 64-bit version of Python (for example from the Windows Store as mentioned above). This may also occur when using Windows 7 - we only support directly Windows 10, however, it may be worth trying to install via conda instead, if you are stuck on Windows 7. 'datapane.exe' is not recognized as an internal or external command \u00b6 This occurs when your Windows %PATH% doesn't include all the Python directories, specifically the Scripts directory. You may notice during the datapane install messages such as (or similar to): The script datapane.exe is installed in 'C:\\users\\<USERNAME>\\appdata\\local\\programs\\python\\python37\\Scripts' which is not on PATH. Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location. To fix this, adjust your %PATH% to include your specific Scripts path as mentioned in the pip warning (see https://datatofish.com/add-python-to-windows-path/ for more detailed instructions). Alternatively, you can try running the datapane client directly, using the command python3.exe -m datapane.client instead. {% hint style=\"info\" %} If you are still having problems installing, please ask on the Datapane Forum , and someone will come to help you.","title":"Getting Started"},{"location":"api/getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"api/getting-started/#installation","text":"Tile is powered by the Datapane library, so you'll need to install this first. Datapane's Python library and CLI can be installed using either conda or pip on macOS, Windows, or Linux. Datapane supports Python 3.6 - 3.9 . Installing Instructions for installing Python can be found at https://wiki.python.org/moin/BeginnersGuide/Download .","title":"Installation"},{"location":"api/getting-started/#conda","text":"If you use conda , you can install it with: Python Jupyter $ conda install -c conda-forge \"datapane>=0.10.0\" $ datapane hello-world !conda install -c conda-forge \"datapane>=0.10.0\" !datapane hello-world Installing Conda sometimes installs an older version of datapane. If you receive errors, please check the version and try running conda update --all or try in a new conda environment ( conda create -n ENV and conda activate ENV)","title":"conda"},{"location":"api/getting-started/#pip","text":"If you use pip , you can install it with: Python Jupyter $ pip3 install -U datapane $ datapane hello-world !pip3 install -U datapane !datapane hello-world","title":"pip"},{"location":"api/getting-started/#upgrading","text":"We upgrade datapane regularly to include new features, both in the client and on the hosted version. From time to time your client may no longer be compatible with the datapane server when uploading a report. If this happens, you will receive an error like the following: IncompatibleVersionError: Your client is out-of-date (version 0.9.2) and may be causing errors, \" please upgrade to version 0.10.2 In such an event, please upgrade your datapane cli via pip or conda and try again. Upgrading via pip If you installed datapane via pip, run the following command: $ pip install -U datapane Upgrading via conda If you installed datapane via conda, run the following command, adding the --all flag if needed. As above, if you receive errors please try using a fresh conda environment. $ conda update datapane OR conda update --all","title":"Upgrading"},{"location":"api/getting-started/#windows-tips-and-troubleshooting","text":"We generally recommend installing via conda over pip on Windows as it's easier to install all the required dependencies. If you need to install Python first, the latest versions of Windows 10 can install Python for you automatically - running python from the command-prompt will take you to the Windows Store where you can download an official version . We also strongly recommend using a 64-bit rather than the 32-bit version of Python, you can check this by running the command python -c \"import struct; print(struct.calcsize('P')*8, 'bit')\" from the Command Prompt. $ python -c \"import struct; print(struct.calcsize('P')*8, 'bit')\" Also note that on Windows, you can run the datapane command either by running datapane or datapane.exe on the command-line. Some specific issues you may encounter on Windows include:","title":"Windows Tips and Troubleshooting"},{"location":"api/getting-started/#import-errors-when-runningimporting-datapane","text":"You may encounter errors such as ImportError: DLL load failed when running datapane or importing it within your Python code. If so, try installing the Visual C++ Redistributables for Windows from Microsoft and running again (you most likely want to download the version for x64, i.e. vc_redist.x64.exe )","title":"Import errors when running/importing datapane"},{"location":"api/getting-started/#datapane-install-errors-trying-to-compile-pyarrow-using-visual-c","text":"This usually occurs when you are running a 32-bit version of Python and installing via pip . Either try using conda or install a 64-bit version of Python (for example from the Windows Store as mentioned above). This may also occur when using Windows 7 - we only support directly Windows 10, however, it may be worth trying to install via conda instead, if you are stuck on Windows 7.","title":"Datapane install errors trying to compile pyarrow using Visual C++"},{"location":"api/getting-started/#datapaneexe-is-not-recognized-as-an-internal-or-external-command","text":"This occurs when your Windows %PATH% doesn't include all the Python directories, specifically the Scripts directory. You may notice during the datapane install messages such as (or similar to): The script datapane.exe is installed in 'C:\\users\\<USERNAME>\\appdata\\local\\programs\\python\\python37\\Scripts' which is not on PATH. Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location. To fix this, adjust your %PATH% to include your specific Scripts path as mentioned in the pip warning (see https://datatofish.com/add-python-to-windows-path/ for more detailed instructions). Alternatively, you can try running the datapane client directly, using the command python3.exe -m datapane.client instead. {% hint style=\"info\" %} If you are still having problems installing, please ask on the Datapane Forum , and someone will come to help you.","title":"'datapane.exe' is not recognized as an internal or external command"},{"location":"old_about/comparisons/","text":"Hosted Jupyter Notebooks \u00b6 When data science teams want an end-to-end hosted environment for SQL and Python which enables collaboration and sharing, they may use a hosted Jupyter notebook. Tile is not a replacement for the analysis or R&D stage of your data science process and seeks to be a complement to these platforms. Instead, it is only focussed on the 'last mile'. This means that you can also use Tile inside any existing Python environment, such as Colab, Deepnote, Hex, or SageMaker. Realtime App Frameworks \u00b6 Frameworks such as Streamlit, Dash, and Gradio allow users to create realtime applications which you then deploy to the cloud. Advantages \u00b6 Highly interactive : reactive execution model better for highly-interactive use-cases (i.e. a live computer vision model) Disadvantages \u00b6 Not decoupled : You can only build realtime apps, not discrete reports (i.e. snapshots). This means that all sharing requires you [TODO: better explanation why this matters] Hard to migrate workloads: Incompatible with Jupyter Notebooks and existing code, whereas Datapane can take existing notebooks and scripts with minimal configuration Complex deployment and engineering: requires architecting and handling of complex apps principles No programmatic reporting: Doesn\u2019t solve the JTBD around programmatic reporting or reporting embedded in workflows","title":"Comparisons"},{"location":"old_about/comparisons/#hosted-jupyter-notebooks","text":"When data science teams want an end-to-end hosted environment for SQL and Python which enables collaboration and sharing, they may use a hosted Jupyter notebook. Tile is not a replacement for the analysis or R&D stage of your data science process and seeks to be a complement to these platforms. Instead, it is only focussed on the 'last mile'. This means that you can also use Tile inside any existing Python environment, such as Colab, Deepnote, Hex, or SageMaker.","title":"Hosted Jupyter Notebooks"},{"location":"old_about/comparisons/#realtime-app-frameworks","text":"Frameworks such as Streamlit, Dash, and Gradio allow users to create realtime applications which you then deploy to the cloud.","title":"Realtime App Frameworks"},{"location":"old_about/comparisons/#advantages","text":"Highly interactive : reactive execution model better for highly-interactive use-cases (i.e. a live computer vision model)","title":"Advantages"},{"location":"old_about/comparisons/#disadvantages","text":"Not decoupled : You can only build realtime apps, not discrete reports (i.e. snapshots). This means that all sharing requires you [TODO: better explanation why this matters] Hard to migrate workloads: Incompatible with Jupyter Notebooks and existing code, whereas Datapane can take existing notebooks and scripts with minimal configuration Complex deployment and engineering: requires architecting and handling of complex apps principles No programmatic reporting: Doesn\u2019t solve the JTBD around programmatic reporting or reporting embedded in workflows","title":"Disadvantages"},{"location":"old_about/faq/","text":"Is Tile production ready? \u00b6 Tile is a repackaging of what was previously Datapane's internal reporting library, which has served millions of reports to hundreds of thousands of people. Who builds Tile? \u00b6 Tile is an open-source community library which is open to contributions, but is most actively developed by the Datapane team. Is Tile free? \u00b6 Yes, Tile is free and will forever be free. When should I not use Tile? \u00b6 Realtime apps \u00b6 Tile's execution model is serverless and based on request-response. If you want realtime apps (where you drag a slider and see updates in realtime, without hitting a submit button), Tile isn't currently a great fit. In this case, we'd recommend something like Streamlit or Dash. Classic BI \u00b6 If you are just computing some simple KPIs on a data warehouse and not doing anything programmatic, you may be better served by SQL and your regular BI tool. No-code \u00b6 If you want non-technical people to build reports who want to use a drag-and-drop UI, Tile isn't the right fit.","title":"FAQ"},{"location":"old_about/faq/#is-tile-production-ready","text":"Tile is a repackaging of what was previously Datapane's internal reporting library, which has served millions of reports to hundreds of thousands of people.","title":"Is Tile production ready?"},{"location":"old_about/faq/#who-builds-tile","text":"Tile is an open-source community library which is open to contributions, but is most actively developed by the Datapane team.","title":"Who builds Tile?"},{"location":"old_about/faq/#is-tile-free","text":"Yes, Tile is free and will forever be free.","title":"Is Tile free?"},{"location":"old_about/faq/#when-should-i-not-use-tile","text":"","title":"When should I not use Tile?"},{"location":"old_about/faq/#realtime-apps","text":"Tile's execution model is serverless and based on request-response. If you want realtime apps (where you drag a slider and see updates in realtime, without hitting a submit button), Tile isn't currently a great fit. In this case, we'd recommend something like Streamlit or Dash.","title":"Realtime apps"},{"location":"old_about/faq/#classic-bi","text":"If you are just computing some simple KPIs on a data warehouse and not doing anything programmatic, you may be better served by SQL and your regular BI tool.","title":"Classic BI"},{"location":"old_about/faq/#no-code","text":"If you want non-technical people to build reports who want to use a drag-and-drop UI, Tile isn't the right fit.","title":"No-code"},{"location":"old_about/mission/","text":"We believe the future of data analysis is open-source and developer-first: the best data teams will be software engineering teams. This is happening already. Open-source and code-first frameworks have revolutionized how we extract , load , and analyze data. But there is one part of the stack that has very little developer-first tooling: the front-end. Sharing things in a code-first way is too hard and takes too long. Data teams lack the tools and frameworks for creating apps which web developers enjoy. This means jumping back to legacy UI-first tools, which lack the benefits of code-first. We think it's time for a radical new way to build data apps which borrows from the best practices of the web frameworks like Rails and Django. We think should be just as easy to whip up an app, dashboard, or report in Python as it is to create it in a drag and drop tool. We believe there is an opportunity to totally redefine the way data-focussed applications. Tile's philosophy includes three guiding principles: Code-first \u00b6 Tile is unashamadely code-first, which means that you have all of the benefits of versioning, testing, and collaboration which are absent in UI-first tools. It also makes it simple to create reports programmatically. Integrate with everything \u00b6 Tile is built so you can generate and share reports from inside of wherever you already analyze data. You can immediately use tile inside of PySpark, Airflow, Jupyter, Colab, or Sagemaker. Tile also renders the libraries you already use, like Pandas, Plotly, and Altair. The goal of the project is to have maximum compatibility with the rest of the data science ecosystem. Serverless \u00b6 Not every interaction should require running a Python thread running in the cloud. Tile believes in a separation of the presentation layer and execution layer. Tile views are compiled into interactive static pages which you can share as HTML documents or host on static sites. When building an app, execution happens in a serverless fashion.","title":"Mission"},{"location":"old_about/mission/#code-first","text":"Tile is unashamadely code-first, which means that you have all of the benefits of versioning, testing, and collaboration which are absent in UI-first tools. It also makes it simple to create reports programmatically.","title":"Code-first"},{"location":"old_about/mission/#integrate-with-everything","text":"Tile is built so you can generate and share reports from inside of wherever you already analyze data. You can immediately use tile inside of PySpark, Airflow, Jupyter, Colab, or Sagemaker. Tile also renders the libraries you already use, like Pandas, Plotly, and Altair. The goal of the project is to have maximum compatibility with the rest of the data science ecosystem.","title":"Integrate with everything"},{"location":"old_about/mission/#serverless","text":"Not every interaction should require running a Python thread running in the cloud. Tile believes in a separation of the presentation layer and execution layer. Tile views are compiled into interactive static pages which you can share as HTML documents or host on static sites. When building an app, execution happens in a serverless fashion.","title":"Serverless"},{"location":"old_about/roadmap/","text":"This is where the roadmap will live.","title":"Roadmap"},{"location":"old_about/usecases/","text":"Instrumenting data pipelines \u00b6 When a discrepancy occurs in our data pipeline and you need to understand what has gone wrong, you can use Tile to create, persist, and share a report with your team. Client sharing \u00b6 When you want to impress potential or existing customers with interactive data products in order to increase revenue/retention, you can use Tile to create interactive reports which you can share with them. Programmatic reporting \u00b6 When you need to save time by automating report creation, you can use Tile to programmatically generate reports (instead of building them manually). Self-service apps \u00b6 When we want non-technical people to be able to run advanced analytics for themselves, we can build them an app using Tile. Ad-hoc internal reporting \u00b6 When you have completed an ad-hoc analysis and want to share your findings with someone non-technical, you can create them a report using Tile.","title":"Use-cases"},{"location":"old_about/usecases/#instrumenting-data-pipelines","text":"When a discrepancy occurs in our data pipeline and you need to understand what has gone wrong, you can use Tile to create, persist, and share a report with your team.","title":"Instrumenting data pipelines"},{"location":"old_about/usecases/#client-sharing","text":"When you want to impress potential or existing customers with interactive data products in order to increase revenue/retention, you can use Tile to create interactive reports which you can share with them.","title":"Client sharing"},{"location":"old_about/usecases/#programmatic-reporting","text":"When you need to save time by automating report creation, you can use Tile to programmatically generate reports (instead of building them manually).","title":"Programmatic reporting"},{"location":"old_about/usecases/#self-service-apps","text":"When we want non-technical people to be able to run advanced analytics for themselves, we can build them an app using Tile.","title":"Self-service apps"},{"location":"old_about/usecases/#ad-hoc-internal-reporting","text":"When you have completed an ad-hoc analysis and want to share your findings with someone non-technical, you can create them a report using Tile.","title":"Ad-hoc internal reporting"},{"location":"old_about/what/","text":"Tile is an SDK and architecture for creating data-driven applications using Python. Tile aims to be the fastest and easiest way for data teams to share insights in a code-first way, with features such as: Static generation of 100% standalone HTML apps which don't require backends Serverless app-running with backend code execution through dynamic forms Plot and data components compatible with the majority of the Python data ecosystem (such as Pandas, Altair, Plotly) Built in client-side layout components, such as dropdowns, selects, grids Fully interactive datatables with exploration and export Integrates into existing Python environments, like Jupyter and Spark What can I build with Tile? \u00b6 Tile shuns the idea that any app interaction requires a running backend server. Instead, the front-end and the backend are decoupled, similar to how many web frameworks and static-site generators work. This is important because it means that you can create apps in various ways, depending on your use case: Need to share ad-hoc plots and data from inside of a notebook? Using Tile, you can prerender an HTML single-page application, which doesn't even require a running server (like an interactive PDF!) Want to build an automated dashboard which updates every five minutes? Add Tile to a GitHub Action or cron job to programmatically update your report on a cadence. Need your end users to enter parameters and generate results on-demand? Add forms to your report which execute your notebooks or scripts on the backend. Static reports \u00b6 Tile allows you to generate static HTML reports from your existing environment, such as Jupyter, Airflow, or Spark. They are fully standalone and do not require a running Python server for viewing. Instead, you can export them as HTML reports or upload them to web-based hosts. Views can contain components which wrap up the Python objects inside your analysis. Out of the box, you can add formats such as: Pandas DataFrames Plots from Python visualization libraries such as Bokeh, Altair, Plotly, and Folium Markdown and text General files, such as images, PDFs, JSON data, etc Tile also provides a rich selection of layout and interactive components, such as grids, dropdowns, selects, and a fully interactive DataTable. Views can replace creating a report in a BI tool, such as Looker or Tableau. import tile_dev as t import snowflake.connector from internal_lib import forecast conn = snowflake . connector . connect ( ... ) users = conn . execute_query ( 'get_users.sql' ) . fetchall () f_data , f_plot = forecast . predict ( df ) sales_v_profit = alt . Chart ( users ) . encode ( x = 'sales' , y = 'profit' , color = 'category' ) t . View ( t . Plot ( sales_v_profit , name = 'sale_v_profit' ), t . DataTable ( f_data , name = 'forecast_data' ), t . Plot ( f_plot , name = 'forecast_plot' ) ) . save ( path = 'report.html' ) Data apps \u00b6 Introduction \u00b6 Static reports are great to start with. They are portable, scalable, and fast to create. But eventually you might need your end-users to be able to run your Python script or Jupyter Notebook themselves. Expanding on the above example, we can add a dynamic form to our view which users can run with parameters. analysis.ipynb # API TBD - this is a mock! import tile_dev as t import snowflake.connector from internal_lib import forecast conn = snowflake . connector . connect ( ... ) users = conn . execute_query ( 'get_users.sql' ) . fetchall () sales_v_profit = alt . Chart ( users ) . encode ( x = 'sales' , y = 'profit' , color = 'category' ) t . View ( t . Plot ( sales_v_profit , name = 'sale_v_profit' ), t . Form ( id = 'forecast' , params = { 'days' : 'integer' , 'item' : 'string' }) t . DataTable ( f_data , name = 'forecast_data' ), t . Plot ( f_plot , name = 'forecast_plot' ) ) . Backend ( t . Function ( path = './forecast.py' , id = 'forecast' ) ) . run_app () forecast.py # API TBD - this is a mock! import tile as t from internal_lib import forecast days = t . Params ( 'days' ) item = t . Params ( 'items' ) f_data , f_plot = forecast . predict ( df , item , days ) t . View ( t . DataTable ( f_data , name = 'forecast_data' ), t . Plot ( f_plot , name = 'forecast_plot' ) ) What is Tile not? \u00b6 Tile is not a realtime reactive web framework like Streamlit or Dash Tile is not an analysis environment like Jupyter","title":"What is Tile?"},{"location":"old_about/what/#what-can-i-build-with-tile","text":"Tile shuns the idea that any app interaction requires a running backend server. Instead, the front-end and the backend are decoupled, similar to how many web frameworks and static-site generators work. This is important because it means that you can create apps in various ways, depending on your use case: Need to share ad-hoc plots and data from inside of a notebook? Using Tile, you can prerender an HTML single-page application, which doesn't even require a running server (like an interactive PDF!) Want to build an automated dashboard which updates every five minutes? Add Tile to a GitHub Action or cron job to programmatically update your report on a cadence. Need your end users to enter parameters and generate results on-demand? Add forms to your report which execute your notebooks or scripts on the backend.","title":"What can I build with Tile?"},{"location":"old_about/what/#static-reports","text":"Tile allows you to generate static HTML reports from your existing environment, such as Jupyter, Airflow, or Spark. They are fully standalone and do not require a running Python server for viewing. Instead, you can export them as HTML reports or upload them to web-based hosts. Views can contain components which wrap up the Python objects inside your analysis. Out of the box, you can add formats such as: Pandas DataFrames Plots from Python visualization libraries such as Bokeh, Altair, Plotly, and Folium Markdown and text General files, such as images, PDFs, JSON data, etc Tile also provides a rich selection of layout and interactive components, such as grids, dropdowns, selects, and a fully interactive DataTable. Views can replace creating a report in a BI tool, such as Looker or Tableau. import tile_dev as t import snowflake.connector from internal_lib import forecast conn = snowflake . connector . connect ( ... ) users = conn . execute_query ( 'get_users.sql' ) . fetchall () f_data , f_plot = forecast . predict ( df ) sales_v_profit = alt . Chart ( users ) . encode ( x = 'sales' , y = 'profit' , color = 'category' ) t . View ( t . Plot ( sales_v_profit , name = 'sale_v_profit' ), t . DataTable ( f_data , name = 'forecast_data' ), t . Plot ( f_plot , name = 'forecast_plot' ) ) . save ( path = 'report.html' )","title":"Static reports"},{"location":"old_about/what/#data-apps","text":"","title":"Data apps"},{"location":"old_about/what/#introduction","text":"Static reports are great to start with. They are portable, scalable, and fast to create. But eventually you might need your end-users to be able to run your Python script or Jupyter Notebook themselves. Expanding on the above example, we can add a dynamic form to our view which users can run with parameters. analysis.ipynb # API TBD - this is a mock! import tile_dev as t import snowflake.connector from internal_lib import forecast conn = snowflake . connector . connect ( ... ) users = conn . execute_query ( 'get_users.sql' ) . fetchall () sales_v_profit = alt . Chart ( users ) . encode ( x = 'sales' , y = 'profit' , color = 'category' ) t . View ( t . Plot ( sales_v_profit , name = 'sale_v_profit' ), t . Form ( id = 'forecast' , params = { 'days' : 'integer' , 'item' : 'string' }) t . DataTable ( f_data , name = 'forecast_data' ), t . Plot ( f_plot , name = 'forecast_plot' ) ) . Backend ( t . Function ( path = './forecast.py' , id = 'forecast' ) ) . run_app () forecast.py # API TBD - this is a mock! import tile as t from internal_lib import forecast days = t . Params ( 'days' ) item = t . Params ( 'items' ) f_data , f_plot = forecast . predict ( df , item , days ) t . View ( t . DataTable ( f_data , name = 'forecast_data' ), t . Plot ( f_plot , name = 'forecast_plot' ) )","title":"Introduction"},{"location":"old_about/what/#what-is-tile-not","text":"Tile is not a realtime reactive web framework like Streamlit or Dash Tile is not an analysis environment like Jupyter","title":"What is Tile not?"}]}